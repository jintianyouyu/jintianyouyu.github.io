<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>APP抓包方法梳理</title>
      <link href="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/"/>
      <url>/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="APP抓包方法梳理"><a href="#APP抓包方法梳理" class="headerlink" title="APP抓包方法梳理"></a>APP抓包方法梳理</h1><h2 id="总结（写在最前）"><a href="#总结（写在最前）" class="headerlink" title="总结（写在最前）"></a>总结（写在最前）</h2><pre class="line-numbers language-none"><code class="language-none">参考链接：https:&#x2F;&#x2F;www.ddosi.org&#x2F;app-packet-captures&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>本想写作在最后，但还是写在最前面，以上参考链接更为的详细可直接跳转以上链接，本篇文章知识挑选自己有用的部分进行了操作</li><li>工具是学不完的，新领域能够数量掌握和使用1-2个工具能够达到目的即可<ul><li><strong>不要忘了初衷，深陷某个兔子洞无法自拔，白白浪费时间</strong></li></ul></li></ul><h2 id="1、使用Burp-Suite进行APP抓包"><a href="#1、使用Burp-Suite进行APP抓包" class="headerlink" title="1、使用Burp Suite进行APP抓包"></a>1、使用Burp Suite进行APP抓包</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre class="line-numbers language-none"><code class="language-none">1、使用夜神虚拟机nox_setup_v7.0.3.9_full,Android 7.0 x32位，root2、Burp Suite 2022.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><p>关于Burp Suite的介绍这里不再赘述，直接开始做相关配置</p><h4 id="Burp-Suite配置"><a href="#Burp-Suite配置" class="headerlink" title="Burp Suite配置"></a>Burp Suite配置</h4><ul><li><p>保证虚拟机与Burp Suite在同一个局域网内</p><ul><li>查看物理机IP地址，后面要用到</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109164512413.png"></p></li><li><p>在 Burpsuite 里面 <strong>Proxy — Options — Proxy Listeners — Add</strong></p><ul><li>选自己本机的网段，端口自定义</li></ul></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109165539240.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109165627459.png"></p><h4 id="手机网络配置"><a href="#手机网络配置" class="headerlink" title="手机网络配置"></a>手机网络配置</h4><ul><li>手机设置里面找到网络配置</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109165803362.png"></p><ul><li><p>长按后选择修改网络</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109165839865.png"></p></li><li><p>选择高级选项–&gt;手动配置，然后填写物理机的IP地址</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109165934853.png"></p></li><li><p>填写在burp suite中的IP地址与端口号，保存即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109170032456.png"></p></li><li><p>完成以上配置，还需要安装BP的证书，在浏览器中输出链接：192.168.0.106:8888，下载证书，并安装</p><ul><li>注意在打开手机浏览器的过程中先将burpsuite的拦截功能关闭</li></ul></li><li><p>打开浏览器后很多的证书告警，先点击继续或者关闭，影响不大</p></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109170317741.png"></p><ul><li><p>访问链接后，点击下载</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109170530185.png"></p></li><li><p>下载后的文件在download文件夹下</p><ul><li>下载之后要对证书文件后缀名进行更改，因为手机是无法打开 .der 后缀的文件，所以要吧 .der 改为 .cer ，然后再进行安装证书</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109170638369.png"></p></li><li><p>安装证书，在手机的设置中–&gt;安全–&gt;从SD卡安装</p><ul><li>找到对应的证书位置，进行安装即可</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109172014252.png"></p></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221109172455921.png"></p><ul><li><p>选择刚刚下载的路径，安装对应的证书，在安装过程中会遇到需要设置密码，按照步骤操作即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111182721183.png"></p></li><li><p>证书命令，随便</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111182814292.png"></p></li><li><p>需要设置密码，按照提示操作往下做，自由选择，这里选择<code>密码</code></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111182846979.png"></p></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111182924360.png"></p><ul><li>之后的操作正常进行即可，后面就可以直接抓取数据包</li></ul><h4 id="问题（证书报错）"><a href="#问题（证书报错）" class="headerlink" title="问题（证书报错）"></a>问题（证书报错）</h4><ul><li><strong>但存在一个问题：浏览器中的证书错误还是无法消除</strong><ul><li>原因：<strong>安卓高版本（7.0）之后，app只信任指定证书和系统内置的证书，后续用户安装的证书是不生效的， 只能想办法装到系统内部</strong></li></ul></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111183135890.png"></p><h5 id="夜神模拟器adb登录"><a href="#夜神模拟器adb登录" class="headerlink" title="夜神模拟器adb登录"></a>夜神模拟器adb登录</h5><pre class="line-numbers language-none"><code class="language-none">* 在实际操作过程中其实回遇到很多问题，这里先插播一条知识之后，再来看遇到的问题* 就事论事，遇到什么问题解决什么问题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用adb命令行登录夜神模拟器，如果没有配置环境变量就直接在相关目录下操作</p><ul><li>使用 <code>cmd</code> 命令，进入夜神模拟器安装目录中的<code>bin</code>目录<code>G:\nox_setup_v7.0.3.9\Nox\bin</code></li><li>执行命令，使用命令行连接安卓模拟器：<code>nox_adb.exe connect 127.0.0.1:62027</code><ul><li>显示连接成功，<strong>这里的登录端口为什么会是62027？？？</strong></li></ul></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111170919587.png"></p><ul><li><p>命令<code>adb devices</code>，显示当前已登录的Android设备（通过端口确定是哪个虚拟机）</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111173901481.png"></p></li></ul><h5 id="夜神模拟器adb登录默认端口"><a href="#夜神模拟器adb登录默认端口" class="headerlink" title="夜神模拟器adb登录默认端口"></a>夜神模拟器adb登录默认端口</h5><pre class="line-numbers language-none"><code class="language-none">其他模拟器应该与之类似夜神模拟器的相关命令：https:&#x2F;&#x2F;support.yeshen.com&#x2F;zh-CN&#x2F;qt&#x2F;adb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>夜神模拟器的默认端口在<code>Nox\bin\BignoxVMS</code>的目录下，下面有很多文件，属于多开的模拟器，开放的那个就在哪里查找</p></li><li><p>当前开发的是模拟器3，那就查Nox_3中的Nox_3.vbox文件</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111171423891.png"></p></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111171508619.png"></p><ul><li><p>查看Nox_3.vbox文件，可以使用Notepad++查看</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111171553658.png" alt="image-20221111171553658"></p></li><li><p>在文件中搜索<code>guestport=&quot;5555&quot;</code>，找到所在行的<code>hostip</code>和<code>hostport</code>，就是我们 adb 连接需要的 ip 和 port</p><ul><li><code>hostport</code>就是夜神模拟器的默认端口</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221111171713959.png"></p></li></ul><h5 id="问题解决：证书安装-系统根"><a href="#问题解决：证书安装-系统根" class="headerlink" title="问题解决：证书安装-系统根"></a>问题解决：证书安装-系统根</h5><pre class="line-numbers language-none"><code class="language-none">前面说存在的证书及报错问题，是由于证书安装问题，这里对burpsuite的证书安装在系统中证书的格式转换需要用到openssl，可以自行安装，也可以直接使用kali中自带的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>下载证书，注意此处存储使用.cer文件格式</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221112102210828.png"></p></li><li><p>使用openssl，将cer证书转为pem证书（使用kali）</p><ul><li><p>此处参考文章很多可自由选择</p><pre class="line-numbers language-none"><code class="language-none">参考链接（本次使用）https:&#x2F;&#x2F;blog.csdn.net&#x2F;liu_jia_liang&#x2F;article&#x2F;details&#x2F;122951236https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_45495060&#x2F;article&#x2F;details&#x2F;127120219https:&#x2F;&#x2F;blog.csdn.net&#x2F;tky_1314&#x2F;article&#x2F;details&#x2F;120879651<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li>使用的命令如下</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">计算证书文件hash值openssl x509 <span class="token operator">-</span>inform der <span class="token operator">-</span>subject_hash_old <span class="token operator">-</span>in bp<span class="token punctuation">.</span>cer<span class="token comment">//-------------------------命令解释---------------------------------//</span>openssl x509 <span class="token operator">-</span>inform der <span class="token operator">-</span>in cacert<span class="token punctuation">.</span>der <span class="token operator">-</span>out cacert<span class="token punctuation">.</span>pem这里的参数说下：<span class="token operator">*</span> openssl x509：解析证书的命令，x509属于密码学里公钥证书的格式标准，属于一个标准。（就理解道这里，参考https<span class="token operator">:</span><span class="token comment">//blog.csdn.net/abccheng/article/details/82697237）</span><span class="token operator">*</span> <span class="token operator">-</span>inform DER<span class="token operator">|</span>PEM，这指定了命令通常需要 X509 证书的输入格式，但如果存在其他选项（例如<span class="token operator">-</span>req），则这可能会更改。DER 格式是证书的 DER 编码，PEM 是 DER 编码的 base64 编码，添加了页眉和页脚行。默认格式为 PEM<span class="token operator">*</span> <span class="token operator">-</span>in filename，指定证书输入文件，若同时指定了<span class="token string">"-req"</span>选项，则表示输入文件为证书请求文件。<span class="token operator">*</span> <span class="token operator">-</span>out filename，指定输出文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生成cer证书的hash值：<code>openssl x509 -inform PEM -subject_hash_old -in bp.cer</code><ul><li>注意，一定记住下面标注的值：<code>9a5ba575</code>，后面有用</li></ul></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221125165948399.png"></p><ul><li><p>再输入命令</p><pre class="line-numbers language-none"><code class="language-none">openssl x509 -inform der -text -in bp.cer -out 9a5ba575.0查看9a5ba575.0文件内容cat 9a5ba575.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221112214829078.png"></p></li><li><p>复制证书到物理主机，通过adb命令导入模拟器中，中间还有过程，但最终导入证书路径：<code>/system/etc/security/cacerts/</code>，具体命令如下</p><ul><li><p><strong>这里有个关键点，中间单个时间比较多，这里需要注意，好多参考链接中未提出</strong>，此步骤必须实施</p><ul><li><p>将9a5ba575.0文件复制到物理主机中后，对文件对容进行修改，具体修改方法为<code>将文件中-----BEGIN CERTIFICATE-----到-----END CERTIFICATE-----的内容剪切后放在文件最前面</code>，完成以上操作后再进行以下操作</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221125171204624.png"></p></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;查看当前靶机的连接状态nox_adb.exe devices&#x2F;&#x2F;判断是否为root权限，如果没有root权限 给模拟器勾选上root，重启模拟器即可nox_adb.exe root&#x2F;&#x2F;执行 adb 命令连接手机，获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录adb shell #连接手机进入shell模式&#x2F;&#x2F;创建临时文件，存放上传的证书文件mkdir &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-addedexit&#x2F;&#x2F;导入证书文件adb push   E:\Desktop\9a5ba575.0     &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;&#x2F;移动至于临时用户证书目录cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added  &#x2F;&#x2F;将系统证书目录权限改成可读可写就可以移动文件不然不行mount -o remount,rw &#x2F;system&#x2F;&#x2F;这里可以使用cp也可以使用mvcp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;&#x2F;&#x2F;移动完之后记得把权限改回只读  （若报错，则可以忽略），此步骤最好还是操作下mount -o remount,ro &#x2F;system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>按照以上步骤操作</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221112221332091.png"></p></li><li><p>完成以上操作，查看系统证书，bp证书已完成安装，再抓包就不再出现证书错误问题</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221125171535107.png"></p></li><li><p>抓取浏览器数据包不再报错</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221125171942087.png"></p></li></ul><h5 id="报错（error-more-than-one-device-emulator）"><a href="#报错（error-more-than-one-device-emulator）" class="headerlink" title="报错（error: more than one device/emulator）"></a>报错（error: more than one device/emulator）</h5><ul><li>由于存在两个设备，所以单独的<code>adb shell</code>，不能确定要连接哪个设备</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221112220333521.png"></p><ul><li><p>使用 -s 命令指定连接设备即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221112220522633.png"></p></li></ul><h3 id="抓取APP流量包"><a href="#抓取APP流量包" class="headerlink" title="抓取APP流量包"></a>抓取APP流量包</h3><ul><li>通过以上的配置流程，解决证书报错问题后，就可以开始抓取数据包<ul><li>测试APP使用微信：微信小程序、微信公众号<ul><li>微信聊天的数据包抓不到，还需要用其他的方法</li></ul></li></ul></li></ul><h4 id="抓取微信小程序的数据包"><a href="#抓取微信小程序的数据包" class="headerlink" title="抓取微信小程序的数据包"></a>抓取微信小程序的数据包</h4><ul><li>按照之前的配置（将证书安装再系统根目录即可住区微信小程序数据包</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221126105520136.png"></p><h4 id="抓取微信公众号的数据包"><a href="#抓取微信公众号的数据包" class="headerlink" title="抓取微信公众号的数据包"></a>抓取微信公众号的数据包</h4><ul><li>按照之前的配置不变（证书安装再系统根目录即可抓取微信公众号数据包）</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221126110340579.png"></p><h2 id="2、使用-Fiddler-对-APP-进行抓包"><a href="#2、使用-Fiddler-对-APP-进行抓包" class="headerlink" title="2、使用 Fiddler 对 APP 进行抓包"></a>2、使用 Fiddler 对 APP 进行抓包</h2><ul><li>此处不涉及fiddler的详细使用，只看对APP抓包流程</li></ul><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span> 使用夜神虚拟机nox_setup_v7<span class="token punctuation">.</span><span class="token number">0.3</span><span class="token number">.9</span>_full<span class="token punctuation">,</span>Android <span class="token number">7.0</span> x32位，root<span class="token operator">*</span> fiddler v5<span class="token punctuation">.</span><span class="token number">0.20211</span><span class="token number">.51073</span> <span class="token keyword">for</span> <span class="token punctuation">.</span>NET <span class="token number">4.6</span><span class="token number">.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><h4 id="fiddler配置"><a href="#fiddler配置" class="headerlink" title="fiddler配置"></a>fiddler配置</h4><p>与burpsuite相同，在抓取数据包之前，需要多fiddler与虚拟机进行配置，具体配置方法如下：</p><ul><li><p>在 Fiddler 里面 Tools — Options</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221129162157978.png"></p></li><li><p>在 options 弹框中切换至 HTTPS ，勾选图中标记的 2 个选项并点击 OK</p><ul><li>此处如果提示需要安装证书，按照默认流程正常安装即可</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221129162942624.png"></p></li><li><p>接着在Tools — Options — Connections，端口写 9999（可随意更改），并勾选 Allow remote computers to connect ，点击 OK</p><ul><li>按照自己的需求自行选择</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221129165421910.png"></p></li><li><p>重启fiddler，配置生效</p></li></ul><h4 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h4><ul><li><p>虚拟机配置方法与burp suite相同</p><ul><li><p>配置好端口与IP地址</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221129165630394.png"></p></li></ul></li></ul><h4 id="安装证书到用户"><a href="#安装证书到用户" class="headerlink" title="安装证书到用户"></a>安装证书到用户</h4><ul><li><p>安装证书：访问配置的IP地址与端口，下载证书，进行安装</p><ul><li>点击标注的内容开始下载证书，按爪方式如burp suite</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221202220333656.png"></p></li><li><p>现在证书后，与burp suite不同的是，在模拟器现在的箭头的地方点击即可安装</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221202221049855.png"></p></li></ul><h4 id="安装证书到系统"><a href="#安装证书到系统" class="headerlink" title="安装证书到系统"></a>安装证书到系统</h4><ul><li><p>对fiddler抓取数据包会遇到与bp相同的问题，处理方式也基本相同</p></li><li><p>导出证书到桌面</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221202222620346.png"></p></li><li><p>使用kali进行操作，直接列出命令</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;证书格式转换openssl x509 -inform DER -in FiddlerRoot.cer -out cacert.pem&#x2F;&#x2F;显示证书MD5#openssl版本在1.0以上的版本的执行这一句openssl x509 -inform PEM -subject_hash_old -in cacert.pem#openssl版本在1.0以下的版本的执行这一句openssl x509 -inform PEM -subject_hash -in cacert.pem&#x2F;&#x2F;重命名证书openssl x509 -inform pem -text -in f.pem -out 269953fb.0 &#x2F;&#x2F;对证书进行修改将-----BEGIN CERTIFICATE-----到-----END CERTIFICATE-----部分移动到最前面&#x2F;&#x2F;------------------------------------------------------------------&#x2F;&#x2F;&#x2F;&#x2F;将证书导入到模拟器（连接与导入方式与bp相同）&#x2F;&#x2F;查看当前靶机的连接状态nox_adb.exe devices&#x2F;&#x2F;判断是否为root权限，如果没有root权限 给模拟器勾选上root，重启模拟器即可nox_adb.exe root&#x2F;&#x2F;执行 adb 命令连接手机，获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录adb shell #连接手机进入shell模式&#x2F;&#x2F;创建临时文件，存放上传的证书文件mkdir &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-addedexit&#x2F;&#x2F;导入证书文件adb push   E:\Desktop\9a5ba575.0     &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added&#x2F;&#x2F;移动至于临时用户证书目录cd &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added  &#x2F;&#x2F;将系统证书目录权限改成可读可写就可以移动文件不然不行mount -o remount,rw &#x2F;system&#x2F;&#x2F;这里可以使用cp也可以使用mvcp * &#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;&#x2F;&#x2F;移动完之后记得把权限改回只读  （若报错，则可以忽略），此步骤最好还是操作下mount -o remount,ro &#x2F;system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>证书安装完成</p></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221202224843918.png"></p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><ul><li><p>完成以上配置即可抓取模拟器数据包，但是数据会比较乱，比较多，可以对fiddler配置下</p><ul><li>可按照自己的需求，选择，途中标注的表示j：仅从远程客户端获取</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221202221834836.png"></p></li><li><p>安装证书在系统中，正常抓包，证书告警也就没有了</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221202225119073.png"></p></li><li><p>随便找个app进行测试抓包</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221203220655225.png"></p></li></ul><pre class="line-numbers language-none"><code class="language-none">fiddler就不再测试微信，一般情况下，抓取微信种的小程序或者公众号数据包，使用bp较多，主要是因为功能多，可以进行扫描和测试如果使用bp抓不到微信数据包，那么就使用下面的操作，fiddler+burp suite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3、burp-suite-fiddler抓APP包"><a href="#3、burp-suite-fiddler抓APP包" class="headerlink" title="3、burp suite+fiddler抓APP包"></a>3、burp suite+fiddler抓APP包</h2><ul><li>如上所说，灵活运用，如果使用burpsuite无法抓到部分APP的数据包，那就换思路，或者中间转圜下，达到目的即可</li></ul><h3 id="burp-suite的配置"><a href="#burp-suite的配置" class="headerlink" title="burp suite的配置"></a>burp suite的配置</h3><ul><li><p>bp的配置基本不需要修改，按照正常 抓包流程配置即可</p><ul><li>记住下面的配置的IP和端口</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221203221425199.png"></p></li></ul><h3 id="fiddler的配置"><a href="#fiddler的配置" class="headerlink" title="fiddler的配置"></a>fiddler的配置</h3><ul><li>其余配置与上一节相同，此处配置代理与bp的代理相同</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221203222118144.png"></p><h3 id="模拟器的配置"><a href="#模拟器的配置" class="headerlink" title="模拟器的配置"></a>模拟器的配置</h3><ul><li><p>主要记住，此处的模拟器配置的IP地址与端口使用fiddler配置的端口即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221203222333820.png"></p></li></ul><h3 id="抓包-1"><a href="#抓包-1" class="headerlink" title="抓包"></a>抓包</h3><ul><li>完成以上配置就可以完成流量通过fiddler转发到bp上</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221203222712809.png"></p><h2 id="4、使用HttpCanary-对-APP-抓包"><a href="#4、使用HttpCanary-对-APP-抓包" class="headerlink" title="4、使用HttpCanary 对 APP 抓包"></a>4、使用HttpCanary 对 APP 抓包</h2><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><pre class="line-numbers language-none"><code class="language-none">虽然 HttpCanary 是一个很不错的抓包工具，但是它并不能跟其他抓包工具进行一个联动转发抓包，所以当渗透测试人员在使用它进行抓包之后，可以直接在手机上进行修改数据包进行测试，但是可能在手机上工作效率没那么高，于是就把要测试的数据包复制出来到 Burpsuite 上进行修改并发包，这个过程也会浪费很多时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>根据以上的问题，所以一般在抓取APP的数据包的时候很少用HttpCanary，至少自己很少用</strong></li></ul><h3 id="环境准备-2"><a href="#环境准备-2" class="headerlink" title="环境准备"></a>环境准备</h3><pre class="line-numbers language-none"><code class="language-none">* 使用夜神虚拟机nox_setup_v7.0.3.9_full,Android 7.0 x32位，root* HttpCanary v9.2.8.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="软件安装与配置"><a href="#软件安装与配置" class="headerlink" title="软件安装与配置"></a>软件安装与配置</h3><ul><li><p>软件的详细使用不再介绍，这里只记录软件的抓包流程</p></li><li><p>安装软件后，对软件进行配置，点击左上角的三道杠，点击设置</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213145208962.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213145301866.png"></p></li><li><p>再设置中本次用到的主要为证书安装与目标应用</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213145429640.png"></p></li><li><p>在目标应用中选取需要抓取的目标APP</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213145648359.png"></p></li></ul><h3 id="抓包-2"><a href="#抓包-2" class="headerlink" title="抓包"></a>抓包</h3><ul><li><p>HttpCanary 支持 HTTP/HTTPS/HTTP2 网络数据包的抓取和分析，其实和 Charles 类似，要抓取 HTTPS 需要使用 MITM 中间技术对 TLS/SSL 数据包进行解密以及明文输出，因此需要安装自签的 CA 证书</p><ul><li>点击抓包需要安装证书，默认安装即可</li><li>安装过程需要设置密码等，按照流程往下走即可，<strong>使用模拟器安装证书有点问题会闪退，先重新启动继续抓包即可</strong></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213145819955.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213150354261.png"></p></li><li><p>完成以上配置后即可开始抓包</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213150435093.png"></p></li><li><p>访问APP后抓取到对应的数据包</p><ul><li><p>此处的操作比较多，主要还是重发、编辑等</p></li><li><p>将数据包长按显示对应的数据包操作方法</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213151339990.png"></p></li><li><p>单击后显示数据包的整体情况</p></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213151441617.png"></p></li></ul><h2 id="4-1、Android证书安装问题"><a href="#4-1、Android证书安装问题" class="headerlink" title="4-1、Android证书安装问题"></a>4-1、Android证书安装问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>已经到这里了那就说下证书Android证书安装问题，HttpCanary的证书在上面也没有安装成功，这里做详细说明</li><li>前面已经简单介绍了，包括burp suite与fiddler的证书安装在系统中，以下对相关的原因与方法做个说明</li></ul><pre class="line-numbers language-none"><code class="language-none">在安卓 7.0 之前系统，直接下载证书装入即可。安卓 7.0 及以上系统对于证书的安全策略做了修改，意味着，从 sdcard 安装用户级 CA 将无法拦截应用流量。我们需要将证书命名为计算出的哈希值后缀 .0 或者直接在手机里面的 用户凭据 可以看到后缀 .0的证书文件 名字，然后导入到根证书目录：&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts 让系统默认可信任。因此安装证书的方式也有所不同，默认它是安装在用户那里的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213152743788.png"></p><ul><li>为了能够抓取https数据流量包，就需要将证书安装在系统，用户目录无法抓取https数据包<ul><li>下面介绍几种证书安装方法：用户与系统</li></ul></li></ul><h3 id="HttpCanary用户证书安装"><a href="#HttpCanary用户证书安装" class="headerlink" title="HttpCanary用户证书安装"></a>HttpCanary用户证书安装</h3><ul><li><p>下面以HttpCanary证书安装为例，安装ssl证书</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213153241096.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213153303799.png"></p></li><li><p>证书安装后能够看到是安装到了用户证书中</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213153422537.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213153518769.png"></p></li></ul><h3 id="HttpCanary用户证书手动安装"><a href="#HttpCanary用户证书手动安装" class="headerlink" title="HttpCanary用户证书手动安装"></a>HttpCanary用户证书手动安装</h3><ul><li><p>导出pem证书，保存在本地</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213154048238.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213154134445.png"></p></li><li><p>手动安装证书：设置-安全-sd卡安装，找到对应的路径安装即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213220338168.png"></p></li></ul><h3 id="HttpCanary系统证书安装"><a href="#HttpCanary系统证书安装" class="headerlink" title="HttpCanary系统证书安装"></a>HttpCanary系统证书安装</h3><ul><li><p>导出证书，这在之前的内容中主要是通过<code>.pem</code>证书转换成<code>.0</code>证书，HttpCanary可以直接导出</p><ul><li>导出后会直接显示导出目录</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213220904861.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213220936796.png"></p></li><li><p>接着要做的就是把证书移动到<code>系统证书目录 /etc/security/cacerts/</code>中</p><ul><li>虽然已经复制进去，但是没用，因为该文件的权限不够，无法执行</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221213221511666.png"></p></li></ul><h4 id="证书导入权限问题"><a href="#证书导入权限问题" class="headerlink" title="证书导入权限问题"></a>证书导入权限问题</h4><ul><li><p>之后的操作与前面的方式相同，可以使用命令行对证书进行导入，完成证书安装在系统中</p></li><li><p>此处使用另一种方法</p><ul><li>在 Magisk 里面安装 Move Certificates模块，该插件可以一键将所有用户证书自动转换为系统区证书</li></ul><p>——————————————————-看最后一小节———————————————————-</p></li></ul><h2 id="5、使用-Charles-对-APP-进行抓包"><a href="#5、使用-Charles-对-APP-进行抓包" class="headerlink" title="5、使用 Charles 对 APP 进行抓包"></a>5、使用 Charles 对 APP 进行抓包</h2><h3 id="环境配置-软件安装"><a href="#环境配置-软件安装" class="headerlink" title="环境配置-软件安装"></a>环境配置-软件安装</h3><h4 id="Charles-下载地址"><a href="#Charles-下载地址" class="headerlink" title="Charles 下载地址"></a>Charles 下载地址</h4><ul><li><p>下载Charles软件：<a href="https://www.charlesproxy.com/download/">https://www.charlesproxy.com/download/</a></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214101631102.png"></p></li></ul><h4 id="注册码生成（破解）"><a href="#注册码生成（破解）" class="headerlink" title="注册码生成（破解）"></a>注册码生成（破解）</h4><ul><li>在线注册地址：<a href="https://www.zzzmode.com/mytools/charles/">https://www.zzzmode.com/mytools/charles/</a></li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214101751334.png"></p><ul><li><p>打开软件，Help-&gt;Registered 输入 key 和生成的激活码即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214102141612.png"></p></li></ul><h3 id="APP抓包"><a href="#APP抓包" class="headerlink" title="APP抓包"></a>APP抓包</h3><ul><li>注册激活之后通过配置参数即可开始抓包操作，整体的抓包流程以及证书安装感觉与之前的抓包软件大同小异，还是操作一遍再说吧</li></ul><h4 id="参数配置-1"><a href="#参数配置-1" class="headerlink" title="参数配置"></a>参数配置</h4><ul><li><p>设置代理，在 Proxy 中</p><ul><li> 此处要抓取的是手机端流量，因此这里将Windows Proxy去掉对勾</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214104311402.png"></p></li><li><p>在Proxy — Proxy Settings 填入代理端口 8888（或者自定义，但不能和系统已占用端口冲突），并且勾上 Support HTTP/2 和 Enable transparent HTTP proxying ，点击右下角 OK 即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214104500159.png"></p></li><li><p>安装证书：PC端与手机端都安装证书</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214104748945.png"></p></li><li><p>PC端证书安装默认进行，但遇到下一步，进行如下操作，其余步骤继续默认安装</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214104858589.png"></p></li><li><p>手机端安装证书，这里与之前软件不同的是，此处会弹出提示信息，可以按照提示信息进行安装</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214105131044.png"></p></li><li><p>安装方式与之前的方式基本相同，不过下载证书的链接为： <a href="http://chls.pro/ssl">http://chls.pro/ssl</a></p><ul><li><p>先配置网络代理为：服务器IP地址+8888端口</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214105345955.png"></p></li><li><p>如果设备弹出以下窗口，选择Allow</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214105514691.png"></p></li><li><p>证书下载，访问链接 <a href="http://chls.pro/ssl%EF%BC%8C%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6">http://chls.pro/ssl，直接下载证书</a></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214105826361.png"></p></li></ul></li><li><p>之后的证书安装与之前的软件相同，但是只能安装在用户层无法安装在系统层，导致https流量无法抓取</p><ul><li>根据4-1还是需要将证书安装在系统中才可以</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221214111534802.png"></p></li><li><p>与bp、fiddler相同，证书未安装在系统层就会报证书错误</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215103752437.png"></p></li></ul><h4 id="https解析"><a href="#https解析" class="headerlink" title="https解析"></a>https解析</h4><ul><li><p>在 Proxy — SSL Proxying Settings 进行 SSL Proxying Settings 设置</p><ul><li>勾选 enable SSL Proxying 复选框代表开启 SSL Proxying 代理，并在 include 栏中添加域名和端口号<ul><li>include 中的列表项代表 Charles 能够展示这些域名的 SSL 请求和响应的明文（设置空表示选择所有的域名与端口）</li></ul></li><li>说明中也提示 Charles 要想使用 SSL Proxying 代理，需要进行 SSL Certificates，即证书签名。前面需要先完成证书的系统安装</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215102629788.png"></p></li><li><p>此按钮可控只SSL代理，一般都是打开的</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215102926184.png"></p></li></ul><h2 id="6、使用-Charles-Burpsuite-对-APP-抓包"><a href="#6、使用-Charles-Burpsuite-对-APP-抓包" class="headerlink" title="6、使用 Charles + Burpsuite 对 APP 抓包"></a>6、使用 Charles + Burpsuite 对 APP 抓包</h2><ul><li><p>数据包转发，与fiddler+bp类似</p></li><li><p>Charles的手机端配置这里不再赘述，正常配置即可</p></li><li><p>Proxy — External Proxy Settings 将 Charles 作为手机端的代理，再由 Charles 将包转发给 burpsuite，所以对于 Charles 来说，burpsuite 就成了一个 External Proxy Server — 外部代理服务器</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215110146049.png"></p></li><li><p>勾选 HTTP 和 HTTPS 代理，代理服务器地址都是 127.0.0.1:8080（这里的配置与 Burpsuite 代理一致） </p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215110415619.png"></p></li><li><p>打开BP进行数据包抓取即可</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215112056147.png"></p></li></ul><h2 id="00、–证书问题–"><a href="#00、–证书问题–" class="headerlink" title="00、–证书问题–"></a>00、–证书问题–</h2><ul><li>关于证书问题，设置单独的章节做一个汇总与整理，就本篇文章用到的方式有两种：<strong>命令行与Magisk</strong><ul><li>相关的原因这里不再赘述：由于7.0以后Android只认系统证书，并且将系统分区/system挂载为只读，直接复制进去的哈希证书也会报错或者无法生效</li></ul></li></ul><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ul><li>使用openssl命令对证书进行转换</li><li>使用adb命令修改/system权限属性（记得再改回来）</li><li>证书生效</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//证书格式转换</span>openssl x509 <span class="token operator">-</span>inform DER <span class="token operator">-</span>in FiddlerRoot<span class="token punctuation">.</span>cer <span class="token operator">-</span>out cacert<span class="token punctuation">.</span>pem<span class="token comment">//显示证书MD5</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">openssl</span><span class="token expression">版本在<span class="token number">1.0</span>以上的版本的执行这一句</span></span>openssl x509 <span class="token operator">-</span>inform PEM <span class="token operator">-</span>subject_hash_old <span class="token operator">-</span>in cacert<span class="token punctuation">.</span>pem<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">openssl</span><span class="token expression">版本在<span class="token number">1.0</span>以下的版本的执行这一句</span></span>openssl x509 <span class="token operator">-</span>inform PEM <span class="token operator">-</span>subject_hash <span class="token operator">-</span>in cacert<span class="token punctuation">.</span>pem<span class="token comment">//重命名证书</span>openssl x509 <span class="token operator">-</span>inform pem <span class="token operator">-</span>text <span class="token operator">-</span>in f<span class="token punctuation">.</span>pem <span class="token operator">-</span>out <span class="token number">269953f</span>b<span class="token punctuation">.</span><span class="token number">0</span> <span class="token comment">//对证书进行修改将-----BEGIN CERTIFICATE-----到-----END CERTIFICATE-----部分移动到最前面</span><span class="token comment">//------------------------------------------------------------------//</span><span class="token comment">//将证书导入到模拟器（连接与导入方式与bp相同）</span><span class="token comment">//查看当前靶机的连接状态</span>nox_adb<span class="token punctuation">.</span>exe devices<span class="token comment">//判断是否为root权限，如果没有root权限 给模拟器勾选上root，重启模拟器即可</span>nox_adb<span class="token punctuation">.</span>exe root<span class="token comment">//执行 adb 命令连接手机，获取权限，把文件夹挂载为读写模式，把文件复制到证书根目录</span>adb shell #连接手机进入shell模式<span class="token comment">//创建临时文件，存放上传的证书文件</span>mkdir <span class="token operator">/</span>data<span class="token operator">/</span>misc<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>cacerts<span class="token operator">-</span>addedexit<span class="token comment">//导入证书文件</span>adb push   E<span class="token operator">:</span>\Desktop\<span class="token number">9</span>a5ba575<span class="token punctuation">.</span><span class="token number">0</span>     <span class="token operator">/</span>data<span class="token operator">/</span>misc<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>cacerts<span class="token operator">-</span>added<span class="token comment">//移动至于临时用户证书目录</span>cd <span class="token operator">/</span>data<span class="token operator">/</span>misc<span class="token operator">/</span>user<span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>cacerts<span class="token operator">-</span>added  <span class="token comment">//将系统证书目录权限改成可读可写就可以移动文件不然不行</span>mount <span class="token operator">-</span>o remount<span class="token punctuation">,</span>rw <span class="token operator">/</span>system<span class="token comment">//这里可以使用cp也可以使用mv</span>cp <span class="token operator">*</span> <span class="token operator">/</span>etc<span class="token operator">/</span>security<span class="token operator">/</span>cacerts<span class="token operator">/</span><span class="token comment">//移动完之后记得把权限改回只读  （若报错，则可以忽略），此步骤最好还是操作下</span>mount <span class="token operator">-</span>o remount<span class="token punctuation">,</span>ro <span class="token operator">/</span>system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Magisk的Move-Certificates模块"><a href="#Magisk的Move-Certificates模块" class="headerlink" title="Magisk的Move Certificates模块"></a>Magisk的Move Certificates模块</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">先给出参考链接：<span class="token operator">*</span> B站视频教程：https<span class="token operator">:</span><span class="token comment">//www.bilibili.com/video/BV1Ud4y1T7U4/?vd_source=df6782b571e37abf0d3d6a3290f0f44d</span><span class="token operator">*</span> 软件下载地址：https<span class="token operator">:</span><span class="token comment">//www.duokaijidi.com/forum.php?mod=viewthread&amp;tid=8&amp;highlight=%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85Magisk</span><span class="token operator">*</span> 详细的抓包流程：https<span class="token operator">:</span><span class="token comment">//blog.csdn.net/xw1680/article/details/126169418</span><span class="token comment">//-----使用以上三个参考链接就能够完全获取到想要的东西，尤其是最后一个比较详细----</span><span class="token operator">*</span> 自行整理：https<span class="token operator">:</span><span class="token comment">//pan.baidu.com/s/16gBzN1N1A3sl7u1FNRzcvg 提取码：j3x7 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><ul><li><p>下载Magisk</p><ul><li>通过网站下载：<a href="https://magiskmanager.com/">https://magiskmanager.com/</a></li><li>GitHub下载：<a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></li></ul></li><li><p>下载Magisk Terminal Emulator</p><ul><li>在安装Magisk之前必须先安装Magisk Terminal Emulator，否则Magisk安装不成功，并且模块按钮为灰色，无法安装模块<ul><li>具体下载方式未找到，应该是可以通过谷歌商店下载，未测试：<a href="https://play.google.com/store/apps/details?id=jackpal.androidterm&amp;hl=en&amp;gl=US">https://play.google.com/store/apps/details?id=jackpal.androidterm&amp;hl=en&amp;gl=US</a></li><li>文件获取链接：<a href="https://links.jianshu.com/go?to=https://cowtransfer.com/s/9794ead1113d47">https://cowtransfer.com/s/9794ead1113d47</a><ul><li>或者可参考最开始的参考链接</li></ul></li></ul></li></ul></li><li><p>下载模块Move_Certificates-v1.9</p><ul><li><p>GitHub上说是可以下载，但下载文件无法使用，可自行测试：<a href="https://github.com/Magisk-Modules-Repo/movecert">https://github.com/Magisk-Modules-Repo/movecert</a></p><ul><li>模块无法安装</li></ul></li><li><p>百度网盘获取地址：<a href="https://pan.baidu.com/s/1CPa1m8maSAX6_T8JM_UVTQ">https://pan.baidu.com/s/1CPa1m8maSAX6_T8JM_UVTQ</a>  提取码：rb1p </p><ul><li>可用</li></ul></li></ul></li></ul><h4 id="软件-模块-安装"><a href="#软件-模块-安装" class="headerlink" title="软件-模块-安装"></a>软件-模块-安装</h4><ul><li><p>安装Magisk与Magisk Terminal Emulator，同时拖进去，安装即可</p><ul><li>安装Magisk实际是安装APP，但并没有安装Magisk，可以把Magisk理解为MagiskAPP的一个插件</li><li>Magisk通过Magisk Terminal Emulator进行安装</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215210919055.png"></p></li><li><p>打开Magisk，APP正常，Magisk未安装</p><ul><li>模块按钮也是灰色（<strong>之前这个问题卡了好久，原来是Magisk没安装的原因</strong>）</li><li>选择允许-记住</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215210946911.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215211104055.png"></p></li><li><p>打开Magisk Terminal Emulator进行操作(视频讲的很清楚，此处做个简单的记录)</p><ul><li><p>按照参考链接：<a href="https://www.duokaijidi.com/forum.php?mod=viewthread&amp;tid=8&amp;highlight=%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85Magisk">https://www.duokaijidi.com/forum.php?mod=viewthread&amp;tid=8&amp;highlight=%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85Magisk</a></p></li><li><p>安装方式分为三种：自带本地安装（版本比较老），在线安装（需要梯子），本地安装（提前下载好Magisk）</p></li><li><p>打开模拟器共享，将Magisk文件放在模拟器共享文件夹中</p><ul><li>其他文件可以不用管</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215211335259.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215211418573.png"></p></li><li><p>打开Magisk Terminal Emulator–&gt;m–&gt;y –&gt;1–&gt;x，本次使用本地安装所有最终选择 x ，不同的方式选择不同，这里截图</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215212025440.png"></p></li><li><p>输入完 x 后，需要输入目录地址：<code>/sdcard/Pictures/app-debug.apk</code>，接着输入 1 ，出现以下图片安装完成</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215212214527.png"></p></li><li><p>重启模拟器：先取消模拟器设置-基础中的root</p><ul><li>因为软件root与模拟器root会冲突</li><li>保存设置，重启即可</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215212339906.png"></p></li></ul></li><li><p>重启后，打开Magisk，已经安装完成，模块功能也可以使用</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215212606493.png"></p></li><li><p>安装模块：Magisk目前不支持在线模块安装，因此需要本地安装模块，将下载好的模块包放入模拟器中</p><ul><li>在模拟器的文件管理中找到，安装即可</li></ul><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215212801313.png"></p><ul><li><p>安装完成，在模块中也能够看到对应的模块</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215212938161.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215213010049.png"></p></li></ul></li><li><p>至此模块安装完成</p><ul><li><strong>注意：在安装完成模块后建议使用模拟器的重启功能，而不是Magisk软件的重启功能，可能会登录不了</strong></li></ul></li></ul><h4 id="证书导入"><a href="#证书导入" class="headerlink" title="证书导入"></a>证书导入</h4><ul><li><p>按照以上操作完成Magisk以及模块安装，如果用户侧存在证书，重启之后会将所有证书导入系统证书中</p></li><li><p>本次以Charles为例，其他的抓包软件相同，安装证书部分就不都说了</p></li><li><p>重启之前</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215213620152.png"></p></li><li><p>重启之后，用户侧证书已经没有了，全部导入系统侧</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215213955959.png"></p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215214047499.png"></p></li><li><p>浏览器报错也就消除了</p><p><img src="/2022/12/15/APP%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%A2%B3%E7%90%86/image-20221215214143276.png"></p></li></ul><pre class="line-numbers language-none"><code class="language-none">以上就是本次APP抓包流程梳理的全部，本次新学习的内容：命令行安装证书、软件自动导入证书。尤其是Magisk的安装比较费劲，但总算是做完了。就这样，有缺失或者以后有更好的方法再补吧<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 移动端渗透-抓包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServerScan-快速端口扫描工具</title>
      <link href="/2022/08/26/ServerScan-%E5%BF%AB%E9%80%9F%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/08/26/ServerScan-%E5%BF%AB%E9%80%9F%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="关于工具"><a href="#关于工具" class="headerlink" title="关于工具"></a>关于工具</h2><ul><li>工具下载：<a href="https://github.com/Adminisme/ServerScan">https://github.com/Adminisme/ServerScan</a></li><li>工具介绍：一款使用Golang开发且适用于攻防演习内网横向信息收集的高并发网络扫描、服务探测工具。<ul><li>这里虽然写的是内网测试工具，实际应用分不了这么精细，内网的在外部打点也可以使用，外部打点的工具也可以在内网使用</li><li>所以一个工具具体使用在哪里，不在自身的定义而在于你怎么用了</li></ul></li></ul><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><ul><li>工具有三种，简洁版，专业版，Cobalt Strike版本，这里介绍Windows_x64专业版</li><li>参数介绍</li></ul><pre class="line-numbers language-none"><code class="language-none">Usage of ServerScan_Pro_v1.0.2_windows_x64.exe:  -h string        带扫描主机支持的 4 种格式:        192.168.1.1        192.168.1.1-10        192.168.1.*        192.168.1.0&#x2F;24.  -m string        扫描类型 icmp 或 tcp. (默认 &quot;icmp&quot;)  -o string        扫描信息输出到文件  -p string        自定义扫描端口，用 &#39;,&#39; 分隔。例如: 21,22,80-99,8000-8080 ... (默认端口 &quot;80-99,7000-9000,9001-9999,4430,1433,1521,3306,5000,5432,6379,21,22,100-500,873,4440,6082,3389,5560,5900-5909,1080,1900,10809,50030,50050,50070&quot;)  -t int（整数）        设置扫描超时时间,最大超时间 30 秒. (默认为 2 秒)  -v    版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;自己的理解ICMP协议，可能是使用了 ICMP 协议所以最初定位内网扫描工具，因为外网探测防护设备可能拒绝ICMP协议探测，造成漏报，内网存在这种的可能就比较少<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>此工具的主要的 3 个功能：探测存活主机，快速扫描全端口（可自定义），识别端口服务</p><ul><li><p>首先探测主机存活</p><p><img src="/2022/08/26/ServerScan-%E5%BF%AB%E9%80%9F%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220827115428223.png"></p></li><li><p>其次探测端口开放</p><p><img src="/2022/08/26/ServerScan-%E5%BF%AB%E9%80%9F%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220827115500007.png"></p></li><li><p>最后对开放对口进行识别</p><p><img src="/2022/08/26/ServerScan-%E5%BF%AB%E9%80%9F%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220827115527365.png"></p></li></ul></li></ul><h2 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h2><ul><li><p>如前面所说，建议还是在内网中探测资产使用，外部打点可能会出现漏报情况</p><ul><li>如果外部扫描使用后，可使用 nmap 再进行深入探测</li></ul><pre class="line-numbers language-none"><code class="language-none">外部打点使用（全端口扫描），建议使用默认的ICMPServerScan_Pro_v1.0.2_windows_x64.exe -h 192.168.110.* -p 1-65535既然定义为内网工具，建议还是内网使用（看个人喜好），使用方式与上边相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息收集-端口扫描 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>feroxbuster-目录扫描工具</title>
      <link href="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>工具下载地址：<a href="https://github.com/epi052/feroxbuster">https://github.com/epi052/feroxbuster</a></li></ul><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><ul><li>目录扫描工具，目录字典需要用自己的，使用 -w 参数手动指定。</li><li>至于说的速度快、很好用之类的，还没实战测试</li></ul><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">x86_64-windows-feroxbuster>feroxbuster<span class="token punctuation">.</span>exe <span class="token operator">-</span>hferoxbuster 2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>1Ben <span class="token string">'epi'</span> Risher <span class="token punctuation">(</span>@epi052<span class="token punctuation">)</span>A fast<span class="token punctuation">,</span> simple<span class="token punctuation">,</span> recursive content discovery tool<span class="token punctuation">.</span>USAGE:    feroxbuster <span class="token namespace">[OPTIONS]</span>OPTIONS:    <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help       Print help information    <span class="token operator">-</span>V<span class="token punctuation">,</span> <span class="token operator">--</span>version    Print version informationTarget selection:<span class="token operator">/</span><span class="token operator">/</span>扫描目标选择：三种方式         <span class="token operator">--</span><span class="token function">resume-from</span> &lt;STATE_FILE>    State file <span class="token keyword">from</span> which to resume a partially complete scan <span class="token punctuation">(</span>ex<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token function">resume-from</span> ferox-1606586780<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>扫描到一般保存的扫描日志文件（查看Output settings参数部分你会明白）        <span class="token operator">--</span>stdin                       Read url<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">from</span> STDIN<span class="token operator">/</span><span class="token operator">/</span>stdin标准输入（键盘输入到缓冲区中的内容）<span class="token operator">--</span>不知道怎么用    <span class="token operator">-</span>u<span class="token punctuation">,</span> <span class="token operator">--</span>url &lt;URL>                   The target URL <span class="token punctuation">(</span>required<span class="token punctuation">,</span> unless <span class="token punctuation">[</span><span class="token operator">--</span>stdin <span class="token punctuation">|</span><span class="token punctuation">|</span> <span class="token operator">--</span><span class="token function">resume-from</span><span class="token punctuation">]</span> used<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>常规用法，如果不使用前两种方式，此参数必须有Composite settings:<span class="token operator">/</span><span class="token operator">/</span>没懂，不会用        <span class="token operator">--</span>burp           <span class="token function">Set</span> <span class="token operator">--</span>proxy to http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8080 and <span class="token function">set</span> <span class="token operator">--</span>insecure to true        <span class="token operator">--</span>burp-replay    <span class="token function">Set</span> <span class="token operator">--</span>replay-proxy to http:<span class="token operator">/</span><span class="token operator">/</span>127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1:8080 and <span class="token function">set</span> <span class="token operator">--</span>insecure to true        <span class="token operator">--</span>smart          <span class="token function">Set</span> <span class="token operator">--</span>extract-links<span class="token punctuation">,</span> <span class="token operator">--</span>auto-tune<span class="token punctuation">,</span> <span class="token operator">--</span>collect-words<span class="token punctuation">,</span> and <span class="token operator">--</span>collect-backups to true        <span class="token operator">--</span>thorough       Use the same settings as <span class="token operator">--</span>smart and <span class="token function">set</span> <span class="token operator">--</span>collect-extensions to trueProxy settings:<span class="token operator">/</span><span class="token operator">/</span>配置代理    <span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token operator">--</span>proxy &lt;PROXY>                    Proxy to use <span class="token keyword">for</span> requests <span class="token punctuation">(</span>ex: http<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:<span class="token operator">/</span><span class="token operator">/</span>host:port<span class="token punctuation">,</span> socks5<span class="token punctuation">(</span>h<span class="token punctuation">)</span>:<span class="token operator">/</span><span class="token operator">/</span>host:port<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>设置代理    <span class="token operator">-</span>P<span class="token punctuation">,</span> <span class="token operator">--</span>replay-proxy &lt;REPLAY_PROXY>      Send only unfiltered requests through a Replay Proxy<span class="token punctuation">,</span> instead of all requests<span class="token operator">/</span><span class="token operator">/</span>只通过Replay Proxy发送未过滤的请求，而不是所有的请求    <span class="token operator">-</span>R<span class="token punctuation">,</span> <span class="token operator">--</span>replay-codes &lt;REPLAY_CODE><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    Status Codes to send through a Replay Proxy when found <span class="token punctuation">(</span>default: <span class="token operator">--</span>status-codes value<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>通过重放代理发送的状态码<span class="token punctuation">(</span>默认值:<span class="token operator">--</span>status-codes<span class="token punctuation">)</span>Request settings:<span class="token operator">/</span><span class="token operator">/</span>请求设置    <span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token operator">--</span>user-agent &lt;USER_AGENT>           Sets the User-Agent <span class="token punctuation">(</span>default: feroxbuster/2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>设置用户代理<span class="token punctuation">(</span>默认:feroxbuster/2<span class="token punctuation">.</span>7<span class="token punctuation">.</span>1<span class="token punctuation">)</span>    <span class="token operator">-</span>A<span class="token punctuation">,</span> <span class="token operator">--</span>random-agent                      Use a random User-Agent<span class="token operator">/</span><span class="token operator">/</span>使用随机的user-agent    <span class="token operator">-</span>b<span class="token punctuation">,</span> <span class="token operator">--</span>cookies &lt;COOKIE><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>               Specify HTTP cookies to be used in each request <span class="token punctuation">(</span>ex: <span class="token operator">-</span>b stuff=things<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>添加网站的cookie进行扫描        <span class="token operator">--</span><span class="token keyword">data</span> &lt;<span class="token keyword">DATA</span>>                       Request<span class="token string">'s Body; can read data from a file if input starts with an @ (ex: @post.bin)    -f, --add-slash                         Append / to each request'</span>s URL<span class="token operator">/</span><span class="token operator">/</span>对请求设置后使用此参数添加到每个请求中（自己理解）    <span class="token operator">-</span>H<span class="token punctuation">,</span> <span class="token operator">--</span>headers &lt;HEADER><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>               Specify HTTP headers to be used in each request <span class="token punctuation">(</span>ex: <span class="token operator">-</span>H Header:val <span class="token operator">-</span>H <span class="token string">'stuff: things'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>可自定义在每个请求头中添加HTTP头    <span class="token operator">-</span>m<span class="token punctuation">,</span> <span class="token operator">--</span>methods &lt;HTTP_METHODS><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         Which HTTP request method<span class="token punctuation">(</span>s<span class="token punctuation">)</span> should be sent <span class="token punctuation">(</span>default: GET<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>设置发送的HTTP请求方法：GET（默认），可自行指定    <span class="token operator">-</span>Q<span class="token punctuation">,</span> <span class="token operator">--</span>query &lt;QUERY><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                  Request<span class="token string">'s URL query parameters (ex: -Q token=stuff -Q secret=key)//查询    -x, --extensions &lt;FILE_EXTENSION>...    File extension(s) to search for (ex: -x php -x pdf js)//添加需要搜索的文件扩展名Request filters://过滤扫描        --dont-scan &lt;URL>...    URL(s) or Regex Pattern(s) to exclude from recursion/scans//排除不扫描/递归扫描的URLResponse filters://响应过滤器    -C, --filter-status &lt;STATUS_CODE>...          Filter out status codes (deny list) (ex: -C 200 -C 401)//过滤掉对应的响应代码        --filter-similar-to &lt;UNWANTED_PAGE>...    Filter out pages that are similar to the given page (ex. --filter-similar-to http://site.xyz/soft404)//过滤掉与给定页面类似的页面    -N, --filter-lines &lt;LINES>...                 Filter out messages of a particular line count (ex: -N 20 -N 31,30)//过滤掉特定行数的消息（未测试）    -s, --status-codes &lt;STATUS_CODE>...           Status Codes to include (allow list) (default: 200 204 301 302 307 308 401 403 405)//允许显示状态码过滤    -S, --filter-size &lt;SIZE>...                   Filter out messages of a particular size (ex: -S 5120 -S 4927,1970)//过滤掉特定大小的消息    -W, --filter-words &lt;WORDS>...                 Filter out messages of a particular word count (ex: -W 312 -W 91,82)//过滤掉特定字数的消息(未测试)    -X, --filter-regex &lt;REGEX>...                 Filter out messages via regular expression matching on the response'</span>s body <span class="token punctuation">(</span>ex: <span class="token operator">-</span>X <span class="token string">'^ignore me$'</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>通过在响应体上匹配正则表达式过滤掉消息<span class="token punctuation">(</span>未测试<span class="token punctuation">)</span>Client settings:    <span class="token operator">-</span>k<span class="token punctuation">,</span> <span class="token operator">--</span>insecure             Disables TLS certificate validation in the client<span class="token operator">/</span><span class="token operator">/</span>在客户端禁用TLS证书验证    <span class="token operator">-</span>r<span class="token punctuation">,</span> <span class="token operator">--</span>redirects            Allow client to follow redirects<span class="token operator">/</span><span class="token operator">/</span>允许客户端遵循重定向    <span class="token operator">-</span>T<span class="token punctuation">,</span> <span class="token operator">--</span>timeout &lt;SECONDS>    Number of seconds before a client<span class="token string">'s request times out (default: 7)//客户端请求超时前的秒数(默认值:7)Scan settings://扫描设置        --auto-bail                    Automatically stop scanning when an excessive amount of errors are encountered//遇到过多错误时停止扫描        --auto-tune                    Automatically lower scan rate when an excessive amount of errors are encountered//当遇到过多的错误时，自动降低扫描速率    -d, --depth &lt;RECURSION_DEPTH>      Maximum recursion depth, a depth of 0 is infinite recursion (default: 4)//最大递归深度，默认为4，如果设置为0则无限递归    -D, --dont-filter                  Don'</span>t auto-<span class="token keyword">filter</span> wildcard responses    <span class="token operator">-</span>e<span class="token punctuation">,</span> <span class="token operator">--</span>extract-links                Extract links <span class="token keyword">from</span> response body <span class="token punctuation">(</span>html<span class="token punctuation">,</span> javascript<span class="token punctuation">,</span> etc<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> make new requests based on findings        <span class="token operator">--</span>force-recursion              Force recursion attempts on all <span class="token string">'found'</span> endpoints <span class="token punctuation">(</span>still respects recursion depth<span class="token punctuation">)</span>    <span class="token operator">-</span>L<span class="token punctuation">,</span> <span class="token operator">--</span>scan-limit &lt;SCAN_LIMIT>      Limit total number of concurrent scans <span class="token punctuation">(</span>default: 0<span class="token punctuation">,</span> i<span class="token punctuation">.</span>e<span class="token punctuation">.</span> no limit<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>限制并发扫描的总数<span class="token punctuation">(</span>默认为0，即不限制<span class="token punctuation">)</span>    <span class="token operator">-</span>n<span class="token punctuation">,</span> <span class="token operator">--</span>no-recursion                 <span class="token keyword">Do</span> not scan recursively<span class="token operator">/</span><span class="token operator">/</span>不进行递归扫描        <span class="token operator">--</span><span class="token keyword">parallel</span> &lt;PARALLEL_SCANS>    Run <span class="token keyword">parallel</span> feroxbuster instances <span class="token punctuation">(</span>one child <span class="token keyword">process</span> per url passed via stdin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>（高端用法，用到再说）        <span class="token operator">--</span>rate-limit &lt;RATE_LIMIT>      Limit number of requests per second <span class="token punctuation">(</span>per directory<span class="token punctuation">)</span> <span class="token punctuation">(</span>default: 0<span class="token punctuation">,</span> i<span class="token punctuation">.</span>e<span class="token punctuation">.</span> no limit<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>限制每秒请求数<span class="token punctuation">(</span>每个目录<span class="token punctuation">)</span><span class="token punctuation">(</span>默认:0，即不限制<span class="token punctuation">)</span>    <span class="token operator">-</span>t<span class="token punctuation">,</span> <span class="token operator">--</span>threads &lt;THREADS>            Number of concurrent threads <span class="token punctuation">(</span>default: 50<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>线程数设置，默认为50        <span class="token operator">--</span>time-limit &lt;TIME_SPEC>       Limit total run time of all scans <span class="token punctuation">(</span>ex: <span class="token operator">--</span>time-limit 10m<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">/</span>限制所有扫描的总运行时间，如：可设置只扫10分钟    <span class="token operator">-</span>w<span class="token punctuation">,</span> <span class="token operator">--</span>wordlist &lt;FILE>              Path to the wordlist<span class="token operator">/</span><span class="token operator">/</span>扫描字典路径Dynamic collection settings:    <span class="token operator">-</span>B<span class="token punctuation">,</span> <span class="token operator">--</span>collect-backups                     Automatically request likely backup extensions <span class="token keyword">for</span> <span class="token string">"found"</span> urls    <span class="token operator">-</span>E<span class="token punctuation">,</span> <span class="token operator">--</span>collect-extensions                  Automatically discover extensions and add them to <span class="token operator">--</span>extensions <span class="token punctuation">(</span>unless they<span class="token string">'re in --dont-collect)    -g, --collect-words                       Automatically discover important words from within responses and add them to the wordlist    -I, --dont-collect &lt;FILE_EXTENSION>...    File extension(s) to Ignore while collecting extensions (only used with --collect-extensions)Output settings://输出设置        --debug-log &lt;FILE>    Output file to write log entries (use w/ --json for JSON entries)        --json                Emit JSON logs to --output and --debug-log instead of normal text        --no-state            Disable state output file (*.state)//禁用状态输出文件(*.state)    -o, --output &lt;FILE>       Output file to write results to (use w/ --json for JSON entries)//将结果写入文件    -q, --quiet               Hide progress bars and banner (good for tmux windows w/ notifications)//隐藏扫描进度条（没有这个看着挺难受）        --silent              Only print URLs + turn off logging (good for piping a list of urls to other commands)//只打印url +关闭日志记录(还是看着难受)    -v, --verbosity           Increase verbosity level (use -vv or more for greater effect. [CAUTION] 4 -v'</span>s is probably too much<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><ul><li><p>工具的运行，使用 -u 参数，默认使用以下标注的功能，与 dirmap 工具最开始的显示相同，添加功能参数，此处会列出来对应使用的参数功能</p><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819223327926.png"></p></li></ul><h3 id="Request-settings：请求设置"><a href="#Request-settings：请求设置" class="headerlink" title="Request settings：请求设置"></a>Request settings：请求设置</h3><ul><li><p>-A：使用随机的user-agent</p><ul><li>程序自动随机修改user-agent，进行反爬绕过</li><li>以上图相比 user-agent 由默认变成了随机（Random)</li></ul><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819201221332.png"></p></li><li><p>-f：对“请求设置”后，如修改的user-agent等参数，可使用此参数添加到每个请求中</p><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819223706553.png"></p></li><li><p>-m：设置发送的HTTP请求方法：GET（默认），可自行指定</p><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819223814244.png"></p></li><li><p>-x：指定要搜索的文件扩展名</p><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819224049171.png"></p></li></ul><h3 id="Request-filters：过滤扫描"><a href="#Request-filters：过滤扫描" class="headerlink" title="Request filters：过滤扫描"></a>Request filters：过滤扫描</h3><ul><li><p>–dont-scan：排除不扫描/递归扫描的URL</p><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819225038904.png"></p></li></ul><h3 id="Response-filters：响应过滤器"><a href="#Response-filters：响应过滤器" class="headerlink" title="Response filters：响应过滤器"></a>Response filters：响应过滤器</h3><ul><li>-C：过滤掉对应的响应代码，对于不必要显示的响应代码都进行过滤，<strong>此参数不能与 -s 参数一起使用</strong><ul><li>简单说：手动设置后将是设置一个过滤一个</li></ul></li></ul><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819230456690.png"></p><ul><li> –filter-similar-to <UNWANTED_PAGE>…：过滤掉与给定页面类似的页面</UNWANTED_PAGE></li><li>例如：–filter-similar-to <a href="http://site.xyz/soft404">http://site.xyz/soft404</a></li></ul><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819231123026.png"></p><ul><li>  -s：允许显示状态码过滤，<strong>此参数不能与 -C 参数一起使用</strong></li><li>默认显示的状态码：200 204 301 302 307 308 401 403 405</li></ul><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819231949200.png"></p><ul><li>-S：过滤掉特定大小的消息<ul><li>例如：-S 5120 -S 4927,1970，此处的过滤大小应该是 Byte<img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819232802209.png"></li></ul></li></ul><h3 id="Scan-settings：扫描设置"><a href="#Scan-settings：扫描设置" class="headerlink" title="Scan settings：扫描设置"></a>Scan settings：扫描设置</h3><ul><li><p> -d：最大递归深度，默认为4，如果设置为0则无限递归</p></li><li><p>此参数可设置递归层数</p></li></ul><p>  <img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819234252067.png"></p><ul><li><p>-n：不进行递归扫描</p><p><img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819234034133.png"></p></li><li><p> -t：线程数设置，默认为50</p></li></ul><p>  <img src="/2022/08/18/feroxbuster-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220819234650099.png"></p><h2 id="工具使用总结"><a href="#工具使用总结" class="headerlink" title="工具使用总结"></a>工具使用总结</h2><ul><li><p>总体而言此工具功能比较多也比较强大，其中还有很多的高级功能，可自行开发，对于此工具列出个常用的命令，使用时可直接赋值命令进行修改即可</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;feroxbuster -u http:&#x2F;&#x2F;www.gshfns.com&#x2F; -w dict_mode_dict.txt -A -b stuff&#x3D;things -m GET&#x2F;POST  -s 200 -S 1143 -d 2 -t 100* -w ：给定自己准备好的字典，程序本身不带字典* -A ：使用随机user-agent，防止反爬拦截* -b ：添加cookie参数，可用于登录扫描* -m ：自定义请求方式GET、POST或者其他* -s ：允许显示的请求状态码，此参数与-C对立使用* -S ：过滤特定大小的数据包，大小单位为byte* -d ：设置扫描递归深度，-n：表示不使用递归扫描（一般都用-n)* -t ：线程数默认50，调节扫描速度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工具使用可直接复制以上参数进行修改，若要设置更多功能参数看以上详解</p><ul><li>此处参数按照个人习惯摘取，仁者见仁智者见智</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息收集-目录扫描 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dirmap-目录扫描工具</title>
      <link href="/2022/08/11/dirmap-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/08/11/dirmap-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="关于工具"><a href="#关于工具" class="headerlink" title="关于工具"></a>关于工具</h2><ul><li>下载地址：<a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a></li></ul><p>下载工具后，先下载对应的python包，使用清华的pip源，此处使用python3</p><pre class="line-numbers language-none"><code class="language-none">pip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple -r requirement.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关于以下文件的作用<ul><li>data：扫描字典更新路径</li><li>output：扫描的历史记录</li><li><strong>dirmap.conf</strong>：配置文件（这个比较关键，通过修改文件参数，改变扫描方式，后面详细说）</li></ul></li></ul><p><img src="/2022/08/11/dirmap-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220811171058861.png"></p><h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><ul><li><p>使用 -h 显示参数信息</p><pre class="line-numbers language-none"><code class="language-none">python3 dirmap.py -h                     #####  # #####  #    #   ##   #####                     #    # # #    # ##  ##  #  #  #    #                     #    # # #    # # ## # #    # #    #                     #    # # #####  #    # ###### #####                     #    # # #   #  #    # #    # #                     #####  # #    # #    # #    # #   v1.0usage: python3 dirmap.py -i https:&#x2F;&#x2F;target.com -lcfoptional arguments:  -h, --help            show this help message and exitEngine:  Engine config  -t THREAD_NUM, --thread THREAD_NUM                        num of threads, default 30&#x2F;&#x2F;配置扫描线程，默认为30Target:  Target config  -i TARGET             scan a target or network (e.g. [http:&#x2F;&#x2F;]target.com , 192.168.1.1[&#x2F;24] ,                        192.168.1.1-192.168.1.100)&#x2F;&#x2F;加入要扫描的目标，可以是URL也可以是IP地址段  -iF FILE              load targets from targetFile (e.g. urls.txt)&#x2F;&#x2F;导入文件扫描Bruter:  Bruter config  -lcf, --loadConfigFile                        Load the configuration through the configuration file                        &#x2F;&#x2F;加载配置文件进行扫描，这里的配置文件可能是 dirmap.conf 文件  --debug               Print payloads and exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2></li><li><p>扫描配置文件 dirmap.conf 看官方介绍，就直接抄了，对于不懂的进行标注，工具文件都是英文看起来费劲</p><ul><li>配置文件比较细，基础功能点看–程序运行</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#递归扫描处理配置-- 开启后扫描速度会比较慢</span><span class="token punctuation">[</span>RecursiveScan<span class="token punctuation">]</span><span class="token comment">#是否开启递归扫描:关闭:0;开启:1</span>conf<span class="token punctuation">.</span>recursive_scan <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#遇到这些状态码，开启递归扫描。默认配置[301,403]</span>conf<span class="token punctuation">.</span>recursive_status_code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">,</span><span class="token number">403</span><span class="token punctuation">]</span><span class="token comment">#URL超过这个长度就退出扫描</span>conf<span class="token punctuation">.</span>recursive_scan_max_url_length <span class="token operator">=</span> <span class="token number">60</span><span class="token comment">#这些后缀名不递归扫</span>conf<span class="token punctuation">.</span>recursive_blacklist_exts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">,</span><span class="token string">'htm'</span><span class="token punctuation">,</span><span class="token string">'shtml'</span><span class="token punctuation">,</span><span class="token string">'png'</span><span class="token punctuation">,</span><span class="token string">'jpg'</span><span class="token punctuation">,</span><span class="token string">'webp'</span><span class="token punctuation">,</span><span class="token string">'bmp'</span><span class="token punctuation">,</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'css'</span><span class="token punctuation">,</span><span class="token string">'pdf'</span><span class="token punctuation">,</span><span class="token string">'ini'</span><span class="token punctuation">,</span><span class="token string">'mp3'</span><span class="token punctuation">,</span><span class="token string">'mp4'</span><span class="token punctuation">]</span><span class="token comment">#设置排除扫描的目录。默认配置空。其他配置：e.g:['/test1','/test2']--如果不是很确定，建议不要设置排除目录，信息收集要全面</span><span class="token comment">#conf.exclude_subdirs = ['/test1','/test2']</span>conf<span class="token punctuation">.</span>exclude_subdirs <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#扫描模式处理配置(4个模式，1次只能选择1个)-- 如下图，当程序运行后会显示当前使用的是哪种模式</span><span class="token punctuation">[</span>ScanModeHandler<span class="token punctuation">]</span><span class="token comment">#模式1 -- 字典模式:关闭:0;单字典:1;多字典:2</span>conf<span class="token punctuation">.</span>dict_mode <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#单字典模式的路径</span>conf<span class="token punctuation">.</span>dict_mode_load_single_dict <span class="token operator">=</span> <span class="token string">"dict_mode_dict.txt"</span><span class="token comment">#多字典模式的路径，默认配置dictmult</span>conf<span class="token punctuation">.</span>dict_mode_load_mult_dict <span class="token operator">=</span> <span class="token string">"dictmult"</span><span class="token comment">#模式2 -- 爆破模式:关闭:0;开启:1</span>conf<span class="token punctuation">.</span>blast_mode <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#生成字典最小长度。默认配置3</span>conf<span class="token punctuation">.</span>blast_mode_min <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#生成字典最大长度。默认配置3</span>conf<span class="token punctuation">.</span>blast_mode_max <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#默认字符集:a-z。暂未使用。</span>conf<span class="token punctuation">.</span>blast_mode_az <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token comment">#默认字符集:0-9。暂未使用。</span>conf<span class="token punctuation">.</span>blast_mode_num <span class="token operator">=</span> <span class="token string">"0123456789"</span><span class="token comment">#自定义字符集。默认配置"abc"。使用abc构造字典</span>conf<span class="token punctuation">.</span>blast_mode_custom_charset <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token comment">#自定义继续字符集。默认配置空。</span>conf<span class="token punctuation">.</span>blast_mode_resume_charset <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#模式3 -- 爬虫模式:关闭:0;开启:1</span>conf<span class="token punctuation">.</span>crawl_mode <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#用于生成动态敏感文件payload的后缀字典</span>conf<span class="token punctuation">.</span>crawl_mode_dynamic_fuzz_suffix <span class="token operator">=</span> <span class="token string">"crawl_mode_suffix.txt"</span><span class="token comment">#解析robots.txt文件。暂未实现。</span>conf<span class="token punctuation">.</span>crawl_mode_parse_robots <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#解析html页面的xpath表达式</span>conf<span class="token punctuation">.</span>crawl_mode_parse_html <span class="token operator">=</span> <span class="token string">"//*/@href | //*/@src | //form/@action"</span><span class="token comment">#是否进行动态爬虫字典生成。默认配置1，开启爬虫动态字典生成。其他配置：e.g:关闭:0;开启:1-- 说是生成字典，但是没看到？？</span>conf<span class="token punctuation">.</span>crawl_mode_dynamic_fuzz <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#模式4 -- Fuzz模式:关闭:0;单字典:1;多字典:2</span>conf<span class="token punctuation">.</span>fuzz_mode <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#单字典模式的路径。</span>conf<span class="token punctuation">.</span>fuzz_mode_load_single_dict <span class="token operator">=</span> <span class="token string">"fuzz_mode_dir.txt"</span><span class="token comment">#多字典模式的路径。默认配置:fuzzmult</span>conf<span class="token punctuation">.</span>fuzz_mode_load_mult_dict <span class="token operator">=</span> <span class="token string">"fuzzmult"</span><span class="token comment">#设置fuzz标签。默认配置&#123;dir&#125;。使用&#123;dir&#125;标签当成字典插入点，将http://target.com/&#123;dir&#125;.php替换成http://target.com/字典中的每一行.php。其他配置：e.g:&#123;dir&#125;;&#123;ext&#125;</span><span class="token comment">#conf.fuzz_mode_label = "&#123;ext&#125;"</span>conf<span class="token punctuation">.</span>fuzz_mode_label <span class="token operator">=</span> <span class="token string">"&#123;dir&#125;"</span><span class="token comment">#处理payload配置。暂未实现。</span><span class="token punctuation">[</span>PayloadHandler<span class="token punctuation">]</span><span class="token comment">#处理请求配置-- 对请求头进行修改，可自带cookie等</span><span class="token punctuation">[</span>RequestHandler<span class="token punctuation">]</span><span class="token comment">#自定义请求头。默认配置空。其他配置：e.g:test1=test1,test2=test2</span><span class="token comment">#conf.request_headers = "test1=test1,test2=test2"</span>conf<span class="token punctuation">.</span>request_headers <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#自定义请求User-Agent。默认配置chrome的ua。</span>conf<span class="token punctuation">.</span>request_header_ua <span class="token operator">=</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"</span><span class="token comment">#自定义请求cookie。默认配置空，不设置cookie。其他配置e.g:cookie1=cookie1; cookie2=cookie2;--可自定义cookie 进行扫描</span><span class="token comment">#conf.request_header_cookie = "cookie1=cookie1; cookie2=cookie2"</span>conf<span class="token punctuation">.</span>request_header_cookie <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#自定义401认证。暂未实现。因为自定义请求头功能可满足该需求(懒XD)</span>conf<span class="token punctuation">.</span>request_header_401_auth <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#自定义请求方法。默认配置get方法。其他配置：e.g:get;head</span><span class="token comment">#conf.request_method = "head"</span>conf<span class="token punctuation">.</span>request_method <span class="token operator">=</span> <span class="token string">"get"</span><span class="token comment">#自定义每个请求超时时间。默认配置3秒。</span>conf<span class="token punctuation">.</span>request_timeout <span class="token operator">=</span> <span class="token number">3</span><span class="token comment">#随机延迟(0-x)秒发送请求。参数必须是整数。默认配置0秒，无延迟。</span>conf<span class="token punctuation">.</span>request_delay <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#自定义单个目标，请求协程线程数。默认配置30线程</span>conf<span class="token punctuation">.</span>request_limit <span class="token operator">=</span> <span class="token number">30</span><span class="token comment">#自定义最大重试次数。暂未实现。</span>conf<span class="token punctuation">.</span>request_max_retries <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#设置持久连接。是否使用session()。暂未实现。</span>conf<span class="token punctuation">.</span>request_persistent_connect <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#302重定向。默认False，不重定向。其他配置：e.g:True;False</span>conf<span class="token punctuation">.</span>redirection_302 <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment">#payload后添加后缀。默认空，扫描时，不添加后缀。其他配置：e.g:txt;php;asp;jsp</span><span class="token comment">#conf.file_extension = "txt"</span>conf<span class="token punctuation">.</span>file_extension <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#处理响应配置</span><span class="token punctuation">[</span>ResponseHandler<span class="token punctuation">]</span><span class="token comment">#设置要记录的响应状态。默认配置[200]，记录200状态码。其他配置：e.g:[200,403,301]</span><span class="token comment">#conf.response_status_code = [200,403,301]</span>conf<span class="token punctuation">.</span>response_status_code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">403</span><span class="token punctuation">,</span><span class="token number">301</span><span class="token punctuation">]</span><span class="token comment">#是否记录content-type响应头。默认配置1记录</span><span class="token comment">#conf.response_header_content_type = 0</span>conf<span class="token punctuation">.</span>response_header_content_type <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#是否记录页面大小。默认配置1记录</span><span class="token comment">#conf.response_size = 0</span>conf<span class="token punctuation">.</span>response_size <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#是否自动检测404页面。默认配置True，开启自动检测404.其他配置参考e.g:True;False</span><span class="token comment">#conf.auto_check_404_page = False</span>conf<span class="token punctuation">.</span>auto_check_404_page <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment">#自定义匹配503页面正则。暂未实现。感觉用不着，可能要废弃。</span><span class="token comment">#conf.custom_503_page = "page 503"</span>conf<span class="token punctuation">.</span>custom_503_page <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#自定义正则表达式，匹配页面内容</span><span class="token comment">#conf.custom_response_page = "([0-9])&#123;3&#125;([a-z])&#123;3&#125;test"</span>conf<span class="token punctuation">.</span>custom_response_page <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#跳过显示页面大小为x的页面，若不设置，请配置成"None"，默认配置“None”。其他大小配置参考e.g:None;0b;1k;1m</span><span class="token comment">#conf.skip_size = "0b"</span>conf<span class="token punctuation">.</span>skip_size <span class="token operator">=</span> <span class="token string">"None"</span><span class="token comment">#代理选项</span><span class="token punctuation">[</span>ProxyHandler<span class="token punctuation">]</span><span class="token comment">#代理配置。默认设置“None”，不开启代理。其他配置e.g:&#123;"http":"http://127.0.0.1:8080","https":"https://127.0.0.1:8080"&#125;</span><span class="token comment">#conf.proxy_server = &#123;"http":"http://127.0.0.1:8080","https":"https://127.0.0.1:8080"&#125;</span>conf<span class="token punctuation">.</span>proxy_server <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment">#Debug选项</span><span class="token punctuation">[</span>DebugMode<span class="token punctuation">]</span><span class="token comment">#打印payloads并退出</span>conf<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#update选项</span><span class="token punctuation">[</span>CheckUpdate<span class="token punctuation">]</span><span class="token comment">#github获取更新。暂未实现。</span>conf<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p>通过配置文件 dirmap.conf 修改完成目录扫描</p><ul><li><p>递归扫描模式开启后速度会稍微有点慢</p></li><li><p>扫描模式共四种，只能选择 1 种：</p><ul><li>字典模式：可选单字典与多字典，字典扫描成功率还是取决于字典的强度</li><li>爆破模式：目前还有待改进，不完善，自定义字符集也不能用（能爆破的字符集只有 abc 三项）</li><li>爬虫模式：可正常使用，参数中生成字典，但未找到对应路径？？</li><li>Fuzz模式：支持单字典和多字典，爆破的URL：<a href="http://target.com/%7Bdir%7D.php%EF%BC%8C%E9%9C%80%E8%A6%81%E5%86%8D%E5%90%8E%E9%9D%A2%E6%B7%BB%E5%8A%A0">http://target.com/{dir}.php，需要再后面添加</a>  {dir} 标签</li></ul></li><li><p>可配合递归扫描进行，在程序运行时会显示对应选用的扫描方式</p><p><img src="/2022/08/11/dirmap-%E7%9B%AE%E5%BD%95%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/image-20220812092237917.png"></p></li><li><p>处理请求配置</p><ul><li>对于请求头进行自定义设置</li><li>可设置 cookie 进行扫描</li><li>默认使用 get 方式，可自定义修改</li></ul></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>目录扫描工具还是要依靠强大的字典进行，虽然该工具提供了 Fuzz 扫描方式，但感觉还是字典或者自定义字典很重要<ul><li>工具功能齐全，但字典还需要各位自行更新，太老的目录字典还是无法获取有价值的资产</li></ul></li></ul><p><strong>就到这里了，有错误后面再改</strong></p>]]></content>
      
      
      <categories>
          
          <category> 信息收集-目录扫描 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>道-法-术-器-势-志</title>
      <link href="/2022/07/30/%E9%81%93-%E6%B3%95-%E6%9C%AF-%E5%99%A8-%E5%8A%BF-%E5%BF%97/"/>
      <url>/2022/07/30/%E9%81%93-%E6%B3%95-%E6%9C%AF-%E5%99%A8-%E5%8A%BF-%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p><strong>用以督促自己，如有不对，见谅</strong></p><p>在做任何事都应该有目标与方向，俗话说的好“凡是想清楚，做事不糊涂”。</p><p>作为刚入门安全行业的从业者，有不对的地方还请指正。</p><p>无意间读到老子的理念，看到关于道、法、术、器、势、志的讲解，突然感觉和自己当前学习的过程很契合，因此做个记录。</p><pre class="line-numbers language-none"><code class="language-none">道以明向，法以立本，术以立策，器以成事，势以立人,志已成事<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>道：道以向明，”道生一，一生二，二生三，三生万物“，道是所有事情的起源，所有的事情都已道为基础，道是所有事情的依据与基石。道法自然，什么是自然，自然而然，本身就存在的。道是宇宙万物和谐运行的本质规律，道应当存在但是又不存在。<ul><li>道自己无法理解，到底是标准算作是道，还是安全的意识算作是道，或者二进制的0和1才算是道，再慢慢体会吧。</li></ul></li><li>法：事物的规律与规则，代表天人合一、顺其自然的最高行事准则。<ul><li>法就是规律，或许理解不对，在我的日常中我的理解就是原理，漏洞的利用原理，工具的编写原理等，凡是关于原理类相关的内容，皆属于法</li></ul></li><li>术：战术、技术、具体的手段、具体的行为方式等，古时候可能更多的是御人之术<ul><li>术，可字面意思理解，即为：技术，战术，常说的技战法，如，漏洞靶机的攻击方法，漏洞利用的方法等，凡是关于方法的介绍内容，皆属于术</li></ul></li><li>器：即是工具与手段，为实现术而存在。<ul><li>器，”操千曲而后晓声,观千剑而后识器“，器即为工具，工具的介绍、工具的用法，皆属于器</li></ul></li><li>势：是一种比较抽象但又具体存在的事物，如磁场一样，凡事物的发展，宇宙万物的运行皆与势相关<ul><li>势，就是个人的努力，器、术、法，如果所有的资源都有，但是不去学习，不去努力，也就是无势，再好的资源也无用</li></ul></li><li>志：即志向，要完成的事<ul><li>道、法、术、器、势最终目的是要完成某一既定目标，要完成你要完成的事，道、法、术、器、势可以说皆是工具，为了完成志的工具</li></ul></li></ul><p>说了这没多，以下定了：法字篇、术字篇、器字篇，道字篇（道还没理解不敢乱写），开始努力完成每个标签中的内容，通过努力这个势，完成自己的志。</p><ul><li>道字篇：法、术、器、势、志的完成慢慢理解道</li><li>法字篇：漏洞原理分析、工具的原理（写工具）、代码原理等，术的大量联系完成法</li><li>术字篇：靶机攻击方法、漏洞利用等，器的组合使用完成术</li><li>器字篇：工具收集、工具的介绍（用途、用法），器的厚积薄发，器要越用越少</li><li>势：完善以上内容即是势</li><li>志：志就不说了等完成了再写出来</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 起始篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>timeketch-协作取证时间轴分析（未完待续...)</title>
      <link href="/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/"/>
      <url>/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<ul><li><p>关于此工具的详细介绍请移步：<a href="https://github.com/google/timesketch#getting-started">https://github.com/google/timesketch#getting-started</a></p></li><li><p>使用APT- hunter工具获取并分析Windows日志后，日志的阅读还是很有难度，此处使用timeketch工具将分析后的日志形成GUI界面排布</p></li></ul><h2 id="关于Timesketch"><a href="#关于Timesketch" class="headerlink" title="关于Timesketch"></a>关于Timesketch</h2><ul><li>Timesketch是一个用于协作取证时间轴分析的开源工具。使用GUI界面，可以很容易地组织日志的时间线，并同时分析它们。用丰富的注释、注释、标签和星号为原始数据添加意义。</li></ul><h2 id="Timesketch安装"><a href="#Timesketch安装" class="headerlink" title="Timesketch安装"></a>Timesketch安装</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ul><li><p>这里简单记录下步骤，参考链接：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p></li><li><p>Timesketch的安装，官方网站建议使用Docker镜像</p><ul><li>当前的 Ubuntu 版本</li></ul><p><img src="/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/image-20220726160039890.png"></p></li><li><p>此处Ubuntu 版本是root权限，所以部分截图中没有带<code>sudo</code></p></li></ul><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><ul><li><p>更新 apt 包索引</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 apt 依赖包，用于通过HTTPS来获取仓库</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \    software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加 Docker 的官方 GPG 密钥</p><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-key fingerprint 0EBFCD88<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/image-20220726164937537.png"></p></li><li><p>使用以下指令设置稳定版仓库</p><pre class="line-numbers language-none"><code class="language-none">sudo add-apt-repository \   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F; \  $(lsb_release -cs) \  stable&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h4><ul><li><p>更新 apt 包索引</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装最新版本的 Docker Engine-Community 和 containerd </p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>安装特定版本的 Docker Engine-Community 和 containerd</p><pre class="line-numbers language-none"><code class="language-none">apt-cache madison docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用第二列中的版本字符串安装特定版本，例如 5:18.09.1<del>3-0</del>ubuntu-xenial</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install docker-ce&#x3D;&lt;VERSION_STRING&gt; docker-ce-cli&#x3D;&lt;VERSION_STRING&gt; containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功</p><pre class="line-numbers language-none"><code class="language-none">sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/image-20220726165436354.png"></p></li></ul><h3 id="安装timesketch"><a href="#安装timesketch" class="headerlink" title="安装timesketch"></a>安装timesketch</h3><ul><li><p>安装好docker环境后，开始安装timesketch工具，按照以下命令</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="安装帮助脚本"><a href="#安装帮助脚本" class="headerlink" title="安装帮助脚本"></a>安装帮助脚本</h4><ul><li><p>这里已经创建了一个帮助脚本，可以完成部分必要的配置，不需要再手动操作。</p><pre class="line-numbers language-none"><code class="language-none">curl -s -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;google&#x2F;timesketch&#x2F;master&#x2F;contrib&#x2F;deploy_timesketch.shchmod 755 deploy_timesketch.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="选择安装目录"><a href="#选择安装目录" class="headerlink" title="选择安装目录"></a>选择安装目录</h4><ul><li><p>Linux与Windows一样，文件安装时可以指定位置的，Windows我们尽量不安装在C盘，有两个原因</p><ul><li>一是为了不占用C盘的资源；二是为了我们能够方便的找到我们文件的安装路径</li></ul></li><li><p>在Linux中也一样这里的安装需要选定一个安装路径，此处在root目录下</p></li><li><p>运行安装部署的脚本文件</p><pre class="line-numbers language-none"><code class="language-none">sudo .&#x2F;deploy_timesketch.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/image-20220726171343646.png"></p><h3 id="启动系统"><a href="#启动系统" class="headerlink" title="启动系统"></a>启动系统</h3><pre class="line-numbers language-none"><code class="language-none">cd timesketchsudo docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>好吧，到这一步报错了，最近没时间处理，就到这里了，后面回来在解决</strong></p><p><img src="/2022/07/26/timeketch-%E5%8D%8F%E4%BD%9C%E5%8F%96%E8%AF%81%E6%97%B6%E9%97%B4%E8%BD%B4%E5%88%86%E6%9E%90/image-20220726205446164.png"></p>]]></content>
      
      
      <categories>
          
          <category> 日志分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APT-Hunter 日志分析工具（未完待续...）</title>
      <link href="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>我们是站在巨人的肩膀上，参考链接：<a href="https://github.com/threatpage/APT-Hunter">https://github.com/threatpage/APT-Hunter</a><ul><li>详细的工具介绍看以上网站</li></ul></li></ul><h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><p>在日志分析过程中每次看到Windows日志都比较头疼，这次发现了一个专门分析Windows日志的工具，做个记录。</p><p> APT- hunter是一款针对窗口事件日志的威胁搜索工具，由紫色团队开发，用于检测隐藏在窗口事件日志海洋中的APT移动，以减少发现可疑活动的时间。此工具将充分利用收集的Windows事件日志，并确保不会错过配置为检测的关键事件。</p><p>APT-Hunter使用python3构建，因此要使用该工具，需要安装所需的库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 <span class="token operator">-</span>m pip install <span class="token operator">-</span>r Requirements<span class="token punctuation">.</span>txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="工具功能"><a href="#工具功能" class="headerlink" title="工具功能"></a>工具功能</h2><p>APT-Hunter有两个部分共同工作，帮助用户快速获得他想要的数据。这个工具将用于快速的windows日志分析。</p><ul><li>收集日志：用户可以手动收集Windows的 CSV 和 EVTX 格式的日志，或者使用工具给出的 powershell 脚本来自动提取所需的日志，后面我们详细讲解。</li><li>可通过 APT-hunter 内置库分析CSV日志与EVTX日志<ul><li>想看GUI需要上传到 <a href="https://github.com/google/timesketch">timesketch</a> 进行分析</li></ul></li></ul><h3 id="Windows日志简述"><a href="#Windows日志简述" class="headerlink" title="Windows日志简述"></a>Windows日志简述</h3><ul><li><p>APT-Hunter工具可分析的Windows系统日志，写道这里了，对Windows日志简单做个介绍</p><ul><li><p>Windows系统日志主要有三种（注意我们这里说的是系统日志）</p><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724155906806.png"></p><ul><li>系统日志: System.evtx，操作系统自身组件产生的日志事件，比如驱动、系统组件和应用软件的崩溃以及数据丢失错误等</li><li>应用程序日志: Application.evtx ，记录应用程序或系统程序运行方面的日志事件，比如数据库程序可以在应用程序日志中记录文件错误，应用的崩溃记录等</li><li>安全日志: Security.evtx ，记录系统的安全审计日志事件，比如登录事件、对象访问、进程追踪、特权调用、帐号管理、策略变更等</li></ul></li></ul></li><li><p>APT-Hunter工具可分析以下Windows日志</p><ul><li><p>Sysmon：Windows与Linux系统上默认没有，这个日志记录工具需要安装</p><ul><li>安装时，可选择记录网络连接安装等，包括每个连接的源进程、IP 地址、端口号、主机名和端口名，记录注册表和文件的操作记录等信息<ul><li>详细安装方式看此处：<a href="https://blog.csdn.net/qq_36618918/article/details/123452710">https://blog.csdn.net/qq_36618918/article/details/123452710</a></li></ul></li><li>Windows系统安装后在以下目录查看<code>应用程序和服务日志/Microsoft/Windows/Sysmon/Operational</code></li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724161426018.png"></p><ul><li>工具下载：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/sysmon">https://docs.microsoft.com/zh-cn/sysinternals/downloads/sysmon</a></li></ul></li><li><p>Security：安全日志</p></li><li><p>System：系统日志</p></li><li><p>Powershell：PowerShell 操作的详细信息，例如启动和停止引擎和提供程序，以及执行 PowerShell 命令。</p><ul><li>日志查看位置<code>应用程序和服务日志/PowerShellCore/Operational</code>，默认不开启，需要手动开启，方式比较多：<a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.2">https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.2</a></li><li>本地组策略-用户配置-管理模板-Windows Powershell<ul><li>这里也包含了一部分关于Powershell的设置</li></ul></li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724164532778.png"></p></li><li><p>Powershell_Operational：记录有关 PowerShell 操作的详细信息，例如启动和停止引擎和提供程序，以及执行 PowerShell 命令</p><ul><li>查看日志位置<code>应用程序和服务日志-Microsoft-Windows-PowerShell-Operational</code></li><li>与前面的Powershellcode一样，需要进行配置，配置方法类似，<a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_logging?view=powershell-5.1">https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_logging?view=powershell-5.1</a></li></ul></li><li><p>ScheduledTask：记录计划任务的启动、报错</p><ul><li>计划任务日志，注意和计划任务列表不同，默认不开启，启用方式如下图</li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724174516076.png"></p><pre class="line-numbers language-none"><code class="language-none">代码 0 或 0x0： 操作成功完成。代码 1 或 0x1： 调用的函数不正确或调用了未知函数。代码 10 或 0xa： 环境不正确。代码 0x8009000f：常规访问被拒绝<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>WinRM：属于window远程管理的一种方式，默认关闭需要手动开启，但日志位置在哪里还真没找到</p><ul><li>开启/关闭方法<a href="https://blog.csdn.net/qq_23663693/article/details/121654390">https://blog.csdn.net/qq_23663693/article/details/121654390</a></li></ul></li><li><p>TerminalServices：通俗的远程桌面，远程桌面日志Windows一般是在Windows日志的Security （安全）日志中</p></li><li><p>Windows_Defender：Windows自己的杀毒软件的日志记录</p></li></ul></li></ul><h2 id="工具参数"><a href="#工具参数" class="headerlink" title="工具参数"></a>工具参数</h2><ul><li>参数</li></ul><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">/</span><span class="token operator">/</span>这里给出了基本的日志分析示例，后面举例说明usage: APT-Hunter<span class="token punctuation">.</span>py <span class="token punctuation">[</span><span class="token operator">-</span>h<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>p PATH<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>o OUT<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>t <span class="token punctuation">&#123;</span>csv<span class="token punctuation">,</span>evtx<span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                     <span class="token punctuation">[</span><span class="token operator">--</span>security SECURITY<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>system SYSTEM<span class="token punctuation">]</span>                     <span class="token punctuation">[</span><span class="token operator">--</span>scheduledtask SCHEDULEDTASK<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>defender DEFENDER<span class="token punctuation">]</span>                     <span class="token punctuation">[</span><span class="token operator">--</span>powershell POWERSHELL<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>powershellop POWERSHELLOP<span class="token punctuation">]</span>                     <span class="token punctuation">[</span><span class="token operator">--</span>terminal TERMINAL<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>winrm WINRM<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">--</span>sysmon SYSMON<span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">/</span>参数英文留着，英文好的可以就直接看optional arguments:  <span class="token operator">-</span>h<span class="token punctuation">,</span> <span class="token operator">--</span>help            show this help message and <span class="token keyword">exit</span>  显示帮助信息并推出  <span class="token operator">-</span>p PATH<span class="token punctuation">,</span> <span class="token operator">--</span>path PATH  path to folder containing windows event logs generated                        by the powershell log collector                        通过powershell脚本获取到的日志路径，一般写绝对<span class="token operator">/</span>相对路径都可以，前提是再当前文件夹下，获取日志的文件名：wineventlog/  <span class="token operator">-</span>o OUT<span class="token punctuation">,</span> <span class="token operator">--</span>out OUT     output file name输出文件名  <span class="token operator">-</span>t <span class="token punctuation">&#123;</span>csv<span class="token punctuation">,</span>evtx<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">--</span><span class="token function">type</span> <span class="token punctuation">&#123;</span>csv<span class="token punctuation">,</span>evtx<span class="token punctuation">&#125;</span>                        csv <span class="token punctuation">(</span> logs <span class="token keyword">from</span> <span class="token function">get-eventlog</span> or windows event log GUI                        or logs <span class="token keyword">from</span> <span class="token function">Get-WinEvent</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span> evtx <span class="token punctuation">(</span> EVTX extension                        windows event log <span class="token punctuation">)</span>                        需要分析的日志的类型，powershel脚本两个脚本获取的日志类型为csv<span class="token punctuation">,</span>evtx，不同的日志类型文件使用哪一种<span class="token operator">/</span><span class="token operator">/</span>以下是单独分析某一种日志的参数  <span class="token operator">--</span>security SECURITY   Path to Security Logs  <span class="token operator">--</span>system SYSTEM       Path to System Logs  <span class="token operator">--</span>scheduledtask SCHEDULEDTASK                        Path to Scheduled Tasks Logs  <span class="token operator">--</span>defender DEFENDER   Path to Defender Logs  <span class="token operator">--</span>powershell POWERSHELL                        Path to Powershell Logs  <span class="token operator">--</span>powershellop POWERSHELLOP                        Path to Powershell Operational Logs  <span class="token operator">--</span>terminal TERMINAL   Path to TerminalServices LocalSessionManager Logs  <span class="token operator">--</span>winrm WINRM         Path to Winrm Logs  <span class="token operator">--</span>sysmon SYSMON       Path to Sysmon Logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取系统日志"><a href="#获取系统日志" class="headerlink" title="获取系统日志"></a>获取系统日志</h2><ul><li>系统日志可以手动获取也可以通过工具自带的脚本获取<ul><li>手动获取参照之前的Windows日志简述中的路径进行导出即可，没找到路径的还得靠各位师傅补充了</li></ul></li></ul><h3 id="自带脚本获取日志"><a href="#自带脚本获取日志" class="headerlink" title="自带脚本获取日志"></a>自带脚本获取日志</h3><ul><li><p>使用工具自带的powershell脚本文件，运行脚本文件：<code>windows-log-collector-full-v3-CSV.ps1</code>与<code>windows-log-collector-full-v3-EVTX.ps1</code></p></li><li><p>运行脚本文件报错，那就解决报错</p><ul><li>解决的参考连接：<a href="https://www.cnblogs.com/jackadam/p/15704911.html">https://www.cnblogs.com/jackadam/p/15704911.html</a></li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724110626417.png"></p></li><li><p>输入命令：<code>get-executionpolicy</code>显示<code>Restricted</code>，<code>Restricted</code>表示：</p><ul><li>Windows 客户端计算机的默认执行策略</li><li>允许单个命令，但不允许脚本</li><li>阻止运行所有脚本文件，包括格式化和配置文件 () 、模块脚本文件 () 和 .ps1xml .psm1 PowerShell 配置文件 .ps1 ()</li></ul></li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724111756464.png"></p><ul><li>需要将<code>Restricted</code>改为<code>RemoteSigned</code>以管理员身份打开PowerShell 输入 <code>set-executionpolicy remotesigned</code>，选择Y，<code>RemoteSigned</code>表示：（后面几句没明白，但是脚本可以运行就可以）<ul><li>Windows 服务器计算机的默认执行策略</li><li>脚本可以运行</li><li>需要受信任的发布者对从 Internet 下载的脚本和配置文件（包括电子邮件和即时消息程序）进行数字签名</li><li>对于在本地计算机上编写且未从 Internet 下载的脚本，不需要数字签名</li><li>如果脚本未受阻止（例如使用 cmdlet），则运行从 Internet 下载且 Unblock-File 未签名的脚本</li><li>从 Internet 来源（而不是 Internet）运行未签名脚本的风险，以及可能是恶意的已签名脚本的风险。</li></ul></li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724112123442.png"></p><ul><li><p>以上报错解决，运行脚本，获取Windows系统的日志文件</p><ul><li>会在当前目录下创建wineventlog文件夹，将获取到的日志存在此文件夹下</li><li>下面报错-红字部分，不用管，不存在此项日志就会报错</li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724112500380.png"></p></li><li><p>日志文件收集成功</p><ul><li>csv格式日志文件，使用脚本：<code>windows-log-collector-full-v3-CSV.ps1</code></li></ul><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724112703115.png"></p><ul><li><p>evtx格式日志文件，使用脚本<code>windows-log-collector-full-v3-EVTX.ps1</code></p><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220724141515595.png" alt="image-20220724141515595"></p></li></ul></li></ul><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><ul><li><p>通过以上操作，获取到Windows的相关日志，开始使用命令进行分析</p></li><li><p>官网中给出了三个范例，在日常使用中这三个也就够用了，简单解释下：</p><ul><li>很好理解，全部分析与单独分析，其他单独分析的就不再说了</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>使用APT<span class="token operator">-</span>Hunter<span class="token punctuation">.</span>py工具分析evtx文件日志，日志路径在<span class="token operator">/</span>opt<span class="token operator">/</span>wineventlogs<span class="token operator">/</span>，输出文件名为Project1<span class="token operator">//</span>此处的文件名可任意定义<span class="token comment">#python3 APT-Hunter.py  -t evtx  -p /opt/wineventlogs/  -o Project1</span><span class="token operator">//</span>与上一条相同，分析日志类型为csv<span class="token comment">#python3 APT-Hunter.py  -t csv  -p /opt/wineventlogs/  -o Project1</span><span class="token operator">//</span>使用APT<span class="token operator">-</span>Hunter<span class="token punctuation">.</span>py工具分析evtx文件日志，单独分析security日志，日志路径在evtx<span class="token operator">/</span>security<span class="token punctuation">.</span>evtx，输出文件名为Project2<span class="token comment">#python3 APT-Hunter.py  -t evtx  --security evtx/security.evtx -o Project2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将所有日志进行分析后会生成两个文件</li></ul><pre class="line-numbers language-none"><code class="language-none">111_Report.xlsx：此excel工作表将包括从提供给APT-Hunter的每个Windows日志中检测到的所有事件111_TimeSketch.csv：您可以将此CSV文件上传到timeketch，以便进行时间轴分析，以帮助您了解攻击的全貌,以GUI的方式显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/07/24/APT-Hunter-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/image-20220725123610965.png"></p><ul><li>这里涉及到一个工具<code>timeketch</code>，这又是另一篇内容，工具的安装请移步另一篇文章</li></ul><p><strong>难受了，安装timeketch工具报错，未安装完成，等报错解决了再不齐剩下的内容</strong></p>]]></content>
      
      
      <categories>
          
          <category> 日志分析-Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yakit-单兵作战武器库</title>
      <link href="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/"/>
      <url>/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<ul><li>站在前人的肩膀上，先给出官方链接：<a href="https://github.com/yaklang/yakit">https://github.com/yaklang/yakit</a></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>写在最前面，技术小白刚入门，不敢过多评价，简单记录工具使用的体验，在使用重有个指导与参考，如有不对的海涵</p><ul><li><p>工具刚刚起步，内部还是有些小问题，如扫描记录显示不全</p></li><li><p>各个模块之间的协同能力欠缺，或者说被动扫描欠缺，需要手动去操作，半自动或者自动化检测能力需要提高</p><p>《就这些》</p></li></ul></li><li><p>这个工具官方给出的指导手册与安装方式相当详细，这里也不用再多赘述，大家按照流程正常安装使用即可。</p><ul><li>想看详细的工具介绍直接移步yakit 官网，这里只是自己的部分记录，并不全面</li></ul></li><li><p>打造 yakit 这款工具的团队雄心壮志，将持续关注</p><ul><li>引用工具介绍的一句话：<code>akit是基于Yak语言开发的网络安全单兵工具，旨在打造一个覆盖渗透测试全流程的网络安全工具库</code></li></ul></li></ul><h2 id="工具下载安装"><a href="#工具下载安装" class="headerlink" title="工具下载安装"></a>工具下载安装</h2><ul><li><p>通过 GitHub 地址下载：<a href="https://github.com/yaklang/yakit/releases">https://github.com/yaklang/yakit/releases</a></p></li><li><p>此处安装在Windows中，双击安装，不让选择路径，程序自动指定路径。</p></li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722165911292.png"></p><ul><li><p>安装完成后开始进行配置操作，先点击<code>核心引擎安装升级</code>，然后点击一键更新，等待更新完成</p><ul><li>后面会跳出几个弹窗，ok就好</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722170227972.png"></p></li><li><p>已管理员启动</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722170458045.png"></p></li><li><p>连接引擎</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722170615289.png"></p></li><li><p>连接引擎之后，正式进入工具使用</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722170643462.png"></p></li></ul><h2 id="更新插件源"><a href="#更新插件源" class="headerlink" title="更新插件源"></a>更新插件源</h2><h3 id="更新插件源-一-问题已解决"><a href="#更新插件源-一-问题已解决" class="headerlink" title="更新插件源(一)-问题已解决"></a>更新插件源(一)-问题已解决</h3><ul><li><p>看到前面我们的yakit已经安装完成，进入工具使用界面，但是先不要着急体验，我们进入后首先要更新插件源，否则好多功能无法使用</p></li><li><p>但是，使用工具自动更新不成功，或者更新后无法显示</p><ul><li>点击右上角的配置，更新Yakit插件源，官方与第三方<ul><li>官方直接使用GitHub下载，第三方使用了GitHub的加速器下载（但是都不行）</li></ul></li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722174625148.png"></p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722174600861.png"></p></li><li><p>各位师傅可以试试，我是没有更新成功，更新后工具中还是没有显示插件，所以只能下载后本地导入</p><ul><li>Yakit 的官方插件<strong>仓库</strong>地址为 <code>https://github.com/yaklang/yakit-store</code></li><li>上图中的官方<strong>POC</strong>源：<code>https://github.com/projectdiscovery/nuclei-templates</code></li></ul></li><li><p>下载对应的源文件，通过本地导入，本地导入时注意一个是仓库，一个POC，分开导入即可</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722180608970.png"></p></li><li><p>都写到这里了上面的也就不删除了，前面遇到这个问题搞了好久最终决定用本地加载，本地刚加载完，发现工具有更新，更新之后，以上的问题自己好了，，，好了就好了，我们接着往下操作就是了</p></li></ul><h3 id="更新插件源-二"><a href="#更新插件源-二" class="headerlink" title="更新插件源(二)"></a>更新插件源(二)</h3><ul><li><p>承接上面的操作，使用官方源应为直接使用github所以会慢一点，这里建议直接使用第三方仓库源</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722213312332.png"></p></li><li><p>安装完成后就能在插件管理中看到对应的插件</p><ul><li>此处建议在网络良好的情况下，全选插件商店，下载到本地，测试过程中总是出现获取不到的情况<ul><li>下载后可在旁边的<code>本地</code>处看到</li></ul></li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722213954813.png"></p></li><li><p>此处我们已<code>重置 nuclei Yaml PoC 数据库</code>次插件为例</p><ul><li><p>点击下载，即可添加到插件仓库</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722214411843.png"></p></li><li><p>点击<code>启动任务</code>即可完成插件功能</p><ul><li>还没理解透：应该是对POC文件进行加载或者重新加载</li><li>那么其他的插件可自行研究</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722214606492.png"></p></li><li><p>如：被动扫描插件，就是在抓包过程中进行被动漏洞探测等</p></li></ul></li></ul><h2 id="手工渗透测试"><a href="#手工渗透测试" class="headerlink" title="手工渗透测试"></a>手工渗透测试</h2><h3 id="MITM模块"><a href="#MITM模块" class="headerlink" title="MITM模块"></a>MITM模块</h3><h4 id="MITM-中间人代理与劫持"><a href="#MITM-中间人代理与劫持" class="headerlink" title="MITM-中间人代理与劫持"></a>MITM-中间人代理与劫持</h4><ul><li><p>这里类似与BurpSuite的拦截功能，实现的方式有所不同，带着这个思路往下走</p><ul><li>这里的插件是灰色，勾选下面的插件自动加载，插件就可选了</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722215750130.png"></p></li><li><p>点击劫持启动，浏览器配置对应的拦截IP地址与端口（与BP一致）</p><ul><li>1、拦截到数据包后放行，丢弃，劫持响应（对返回数据包拦截）</li><li>2、已启用就是在上面配置过程中勾选的，全部：可以将所有的验证脚本都勾选上</li><li>3、劫持响应是对所有的数据包进行拦截包括返回的数据包；手动劫持是开始拦截；自动方行是不拦截</li><li>剩余的小点就不再说了如过滤器、匹配标记等</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722220310351.png"></p></li><li><p>此处与bp不同的地方，要想查看返回的响应包，就需要点击劫持响应，查看返回包，没有分屏显示</p><ul><li>感觉这个功能不好，没有重放分屏显示，不方便，不知道是不是我没找到</li><li>右键可以发送到Web Fuzzer可以分屏显示不知道与BP是不是一个意思</li></ul></li><li><p>右键菜单，这里先提下，后面说到每个模块的功能的时候补充</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722221405473.png"></p></li></ul><h5 id="https证书"><a href="#https证书" class="headerlink" title="https证书"></a>https证书</h5><ul><li><p>这里需要单独说下证书，为了抓取https的数据包没那么就需要安装相关证书，点击后有下载按钮，下载即可</p></li><li><p>下载后将文件后缀改成<code>.crt</code>，右键–安装证书-即可，安装过程不再截图</p><ul><li>之后既可以抓取https的数据包了</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723162656970.png"></p></li></ul><h4 id="HTTP-History"><a href="#HTTP-History" class="headerlink" title="HTTP History"></a>HTTP History</h4><ul><li><p>显示历史数据包，点击后显示详情</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722223629028.png"></p></li></ul><h4 id="网站树视角"><a href="#网站树视角" class="headerlink" title="网站树视角"></a>网站树视角</h4><ul><li>直观的看到扫描过的网站</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722223918043.png"></p><ul><li><p>右键可发送到三个模块</p><ul><li>后面看到者三个模块在详细介绍</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722224221232.png"></p></li><li><p>数据包最后的<code>详情</code></p><ul><li>可右键发送到Fuzzer模块，也就是数据包重放模块</li><li>下面还有一部分显示，是对数据包的分解，添加了复制功能</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722224441594.png"></p></li><li><p>发送的数据包扫描</p><ul><li>只能选一个，点击开始</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722225135291.png"></p><ul><li><p>输出扫描结果，这里可以配合工具操作好理解点</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220722225221371.png"></p></li></ul></li></ul><h3 id="Web-Fuzzer-重放模块"><a href="#Web-Fuzzer-重放模块" class="headerlink" title="Web Fuzzer-重放模块"></a>Web Fuzzer-重放模块</h3><ul><li>通过测试感觉自己的理解没有问题，Web Fuzzer应该类似于重放功能<ul><li>部分标签功能还没熟悉，先简单说下使用</li></ul></li></ul><p>在前面的操作中右键有标签选项发送到 Fuzzer，就是发送到重放模块，如下图</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723163408479.png"></p><ul><li>1、就是将修改好的数据包进行发送，旁边会返回发送的结果数据包</li><li>2、这里有个高级选项，看名字能知道一部分<ul><li>设置代理：配置代理访问内网或者被墙的地址</li><li>HTTPS：发送HTTPS的数据包</li><li>请求HOST：应该是防护绕过的措施</li></ul></li><li>3、此处可以修改数据包后通过1发送出去</li></ul><p>这个模块叫做 Web Fuzzer，那么就存在模糊测试的功能，但此处没没明白模糊测试的是哪些内容</p><ul><li>在数据包发送之后，点击<code>详情</code></li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723164043607.png"></p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723164127853.png"></p><ul><li><p>以上图片作为对比，这里点击模糊测试，数据包会发生变化，重新提交数据包</p><ul><li>这里能力有限，这个模糊测试的功能还是没有太明白是什么意思</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723164257481.png"></p></li></ul><p><strong>那这个重放模块就到这里，后面看到具体功能点再做补充</strong></p><h2 id="基础安全工具"><a href="#基础安全工具" class="headerlink" title="基础安全工具"></a>基础安全工具</h2><ul><li>这个模块工具主要是一些基础的安全工具的集成</li></ul><h3 id="爆破与未授权"><a href="#爆破与未授权" class="headerlink" title="爆破与未授权"></a>爆破与未授权</h3><ul><li>看图说话，看到内容就知道，主要是进行认证的爆破，爆破的类型目前就这几种，工具还在更新不知道作者的这个模块会不会更新<ul><li>支持批量扫描，需要上传txt文件</li></ul></li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723165906732.png"></p><ul><li><p>爆破最重要的是字典，不添加就使用默认字典，通过<code>更多参数</code>添加</p><ul><li><p>操作简单看图添加即可</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723165958944.png"></p></li></ul></li></ul><h3 id="基础爬虫"><a href="#基础爬虫" class="headerlink" title="基础爬虫"></a>基础爬虫</h3><ul><li><p>输入需要爬取的目标，开始执行</p><ul><li>2处是该模块的代码，懂代码的师傅可以看看，自己就不班门弄斧了</li><li>3处有点小问题，扫描记过可能会显示不全</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723170453273.png"></p></li><li><p>后面还有一个模块：基础爬虫[local]，自己没卡出来什么不一样，这里就不说了</p></li></ul><h3 id="空间引擎"><a href="#空间引擎" class="headerlink" title="空间引擎"></a>空间引擎</h3><ul><li>这里使用了奇安信的鹰图搜索，写上你的key，开始查询</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723172018976.png"></p><h3 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h3><ul><li><p>输入顶级域名，开始进行子域名查找，还可以查找C端</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723173002613.png"></p></li></ul><h3 id="综合目录扫描"><a href="#综合目录扫描" class="headerlink" title="综合目录扫描"></a>综合目录扫描</h3><ul><li><p>主要是进行目录扫描，类似御剑等工具，关键还是字典</p><ul><li>添加默认自带的字典文件进行扫描</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723173822109.png"></p><ul><li><p>通过额外参数添加自定义的字典文件或文件夹</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723173909878.png"></p></li></ul></li></ul><h2 id="专项漏洞检测"><a href="#专项漏洞检测" class="headerlink" title="专项漏洞检测"></a>专项漏洞检测</h2><ul><li><p>通过最开始插件商店更新相关漏洞插件，这里可选择对应的漏洞进行检查，并显示检查结果</p><ul><li><p>POC也可以自己写，有相关的说明与插件编写方法</p></li><li><p>支持批量扫描，通过额外配置上传文件</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723174350678.png"></p></li></ul></li></ul><h2 id="payload管理"><a href="#payload管理" class="headerlink" title="payload管理"></a>payload管理</h2><ul><li><p>通过此处可以上传字典，包括用户名与密码</p><ul><li>相关的按钮就是新增与上传字典，很简单</li><li>此处出现了 Fuzz 模块的渲染，前面说自己不太懂的地方，等用到学会了再补充</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723174828241.png"></p></li></ul><h2 id="Yak-Runner"><a href="#Yak-Runner" class="headerlink" title="Yak Runner"></a>Yak Runner</h2><ul><li><p>这里应该是作者留下的用来测试yak代码的地方，通过运行按钮可以看到自己脚本输出成果</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723175247959.png"></p></li></ul><h2 id="反连管理"><a href="#反连管理" class="headerlink" title="反连管理"></a>反连管理</h2><ul><li>这个模块主要提供了：端口监听、反连服务器、DNSLog、ICMP-SizeLog、TCP-PortLog 五个功能。</li><li>这里还没测试与使用过，暂时先不写<ul><li>根据给出的模块功能，应该是内网穿透，数据包回传与监听的功能</li></ul></li></ul><h2 id="数据处理（小工具）"><a href="#数据处理（小工具）" class="headerlink" title="数据处理（小工具）"></a>数据处理（小工具）</h2><ul><li><p>数据对比，将数据输入对比出不同的地方</p><ul><li>以下是百度百科，随便粘贴的</li></ul><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723181101591.png"></p></li><li><p>codec，对常见的加密方式的汇总，包括国密算法</p><p><img src="/2022/07/22/yakit-%E5%8D%95%E5%85%B5%E4%BD%9C%E6%88%98%E6%AD%A6%E5%99%A8%E5%BA%93/image-20220723181259764.png"></p></li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>最后的模块数据库，是对真个操作过程的记录，包括扫描结果的漏洞详情、端口资产、子域名资产、HTTP数据包历史记录等，支持表格导出</li><li>就这样了，后面学会了再进行补充</li></ul>]]></content>
      
      
      <categories>
          
          <category> 信息收集自动化工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水泽-信息收集自动化工具</title>
      <link href="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>我们都是站在巨人的肩膀，所以最开头先写参考链接地址：<a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>工具下载，下载地址：<a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></p></li><li><p>环境准备，根据下载时提供的安装要求</p><ul><li><p>操作系统：ubuntu 20.04.2，提前给ubuntu换好源，我这里用的是阿里源</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721212239481.png"></p></li><li><p>python环境：python3.8</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721212322352.png"></p></li></ul></li></ul><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>使用以下命令</p><pre class="line-numbers language-none"><code class="language-none">chmod 777 build.sh.&#x2F;build.sh   &#x2F;&#x2F;命令执行后就是等待安装完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>使用以上命令进行安装，看了好多师傅的安装教程，先说一句：可能会报错。刚开始安装挺顺利感觉应该没问题，但是到最后还是报错了，那我们就解决这个错误</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721212448922.png"></p></li></ul><pre class="line-numbers language-none"><code class="language-none">ERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.launchpadlib 1.10.13 requires testresources, which is not installed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大概意思就是说：有个 testresources 的依赖包没有安装，那么我们手动进行安装，这里使用清华源</p><pre class="line-numbers language-none"><code class="language-none">ip3 install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple testresources<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后直接运行水泽即可，显示安装完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ShuiZe<span class="token punctuation">.</span>py  <span class="token operator">-</span>h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721213407314.png"></p><p><strong>安装完成，下面我们开始使用水泽，先看参数，再看文件配置</strong></p><h2 id="水泽参数详解"><a href="#水泽参数详解" class="headerlink" title="水泽参数详解"></a>水泽参数详解</h2><pre class="line-numbers language-none"><code class="language-none">Options:  -h, --help            show this help message and exit  -d DOMAIN, --domain&#x3D;DOMAIN  备案反查顶级域名：-d baidu.com(顶级域名)  -c CSUBNET, --cSubnet&#x3D;CSUBNET                查C端：-c 192.169.1.0,192.168.2.0 或 -c 在过程中获取C端进行扫描  -n ISINTRANET, --intranet&#x3D;ISINTRANET                扫描内网时设置成1  -p PROXY, --proxy&#x3D;PROXY                配置内网代理 socks5 socks4（扫描内网时添加代理使用）  -f FILE, --file&#x3D;FILE  &#x2F;result&#x2F;2ddcaa3ebbd0&#x2F;172.18.82.0.xlsx  检测文件中域名漏洞：-f url.txt（上面给的没看懂）  -w WEAK, --weak&#x3D;WEAK  加载密码脚本  未测试，这里的密码脚本不知道指的是不是字典  -v VPN, --vpn&#x3D;VPN     Run in the case of vpn（未测试）  --web&#x3D;WEB             扫描内网网页  --mn&#x3D;MASNMAPFILE      将masscan与nmap 扫描的结果带入扫描（自己的理解）  --fofaTitle&#x3D;FOFATITLE                        从fofa里收集title的资产，然后漏洞检测:--fofaTitle 牛津大学  --domainFile&#x3D;DOMAINFILE                        批量跑根域名列表：--domainFile domain.txt  --ksubdomain&#x3D;KSUBDOMAIN                        不调用ksubdomain爆破子域名  --test&#x3D;TESTDEMO       演示测试扫描(扫描示例)：如果 test&#x3D;1 运行测试演示  --justInfoGather&#x3D;JUSTINFOGATHER                        仅信息收集，不检测漏洞：--justInfoGather 1  --getSocks&#x3D;GETSOCKS   get socks（没懂）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数使用样例</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>d domain<span class="token punctuation">.</span>compython3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>d domain<span class="token punctuation">.</span>com <span class="token operator">-</span><span class="token operator">-</span>justInfoGather <span class="token number">1</span>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>d domain<span class="token punctuation">.</span>com <span class="token operator">-</span><span class="token operator">-</span>ksubdomain <span class="token number">0</span>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>c <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.0</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token number">.3</span><span class="token number">.0</span>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>f url<span class="token punctuation">.</span>txtpython3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>n <span class="token number">1</span> <span class="token operator">-</span>c <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.0</span> <span class="token operator">-</span>p <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">1111</span>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>n <span class="token number">1</span> <span class="token operator">-</span>f url<span class="token punctuation">.</span>txt <span class="token operator">-</span>p <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">1111</span> <span class="token operator">-</span><span class="token operator">-</span>web <span class="token number">1</span>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>n <span class="token number">1</span> <span class="token operator">-</span>c <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.0</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token number">.2</span><span class="token number">.0</span> <span class="token operator">-</span>v <span class="token number">1</span>proxychains4 python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>n <span class="token number">1</span> <span class="token operator">-</span>f <span class="token operator">/</span>result<span class="token operator">/</span>2ddcaa3ebbd0<span class="token operator">/</span><span class="token number">172.18</span><span class="token number">.82</span><span class="token number">.0</span><span class="token punctuation">.</span>xlsxproxychains4 python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span>n <span class="token number">1</span> <span class="token operator">-</span>w <span class="token number">1</span> <span class="token operator">-</span>f <span class="token operator">/</span>result<span class="token operator">/</span>2ddcaa3ebbd0<span class="token operator">/</span><span class="token number">172.18</span><span class="token number">.82</span><span class="token number">.0</span><span class="token punctuation">.</span>xlsxpython3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>mn masNmap<span class="token punctuation">.</span>xlsxpython3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>mn masNmap<span class="token punctuation">.</span>xlsx <span class="token operator">-</span>w <span class="token number">1</span>python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>fofaTitle 大学python3 ShuiZe<span class="token punctuation">.</span>py <span class="token operator">-</span><span class="token operator">-</span>domainFile domain<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果时间足够，并且外部打点，建议直接使用 -d 参数，一路到底，可最大程度收集到有用信息</strong></p><h3 id="d：备案反查顶级域名"><a href="#d：备案反查顶级域名" class="headerlink" title="-d：备案反查顶级域名"></a>-d：备案反查顶级域名</h3><p>该参数功能（显示信息比较多，这里简单列出个人感觉比较重要的功能）</p><ul><li><p>获取网站的备案信息，并获取改网站所在公司的所有子公司</p><ul><li>攻防可通过其他子公司打入</li></ul></li><li><p>获取网站所有公司以及子公司的备案信息，包括：电话、邮箱等</p><ul><li><p>可社工利用</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721215539815.png"></p></li></ul></li><li><p>不是泛解析，调用ksubdomain爆破子域名，并获取子域名的IP地址</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721215921082.png"></p></li><li><p>theHarvest获取邮箱：这个本次测试没看到</p></li><li><p>通过第三方数据接口—获取子域名</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721223124415.png"></p></li><li><p>通过github–获取子域名，将结果导入到 txt 文件中，路径会在扫描结束后显示</p><ul><li>这里需要添加 github 的key</li></ul><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721223251921.png"></p></li><li><p>调用百度与必应的搜索语法，爬取网站链接：子域名、后台等</p><ul><li>这里简单看了下，感觉使用了搜索引擎的语法（不知道对不对）</li></ul><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721222704546.png"></p></li><li><p>显示证书</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721223621010.png"></p></li><li><p>子域名友链</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721223851233.png"></p></li><li><p>以下四个放到一起理解：解析子域名A记录,检测是否CDN和整理C段的IP</p><ul><li><p>解析子域名A记录，检测是否CDN</p><ul><li>CDN：理解为网站的本地缓存，访问的IP并不是真正服务器的IP地址，而是缓存服务器的IP地址，目的是为了加快访问速度</li></ul><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721224454751.png"></p></li><li><p>这个理C端IP地址</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721224815433.png"></p></li></ul></li><li><p>资产测绘平台：fofa，shodan，quake，qianxin</p><ul><li>需要添加对应的key</li></ul><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721225043727.png"></p></li><li><p>IP反查域名</p><ul><li>使用网站：<a href="https://webscan.cc/">https://webscan.cc/</a></li></ul><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721225559396.png"></p></li><li><p>探测扫描到的IP地址与URL存活</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721225733917.png"></p></li><li><p>漏洞检测，web漏洞、cms漏洞等</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220721230114752.png"></p></li><li><p>最终结果保存在表格与txt文件中</p><ul><li>这个就比较明确不再赘述，表格中写的很清楚</li></ul></li></ul><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>水泽中有漏洞验证模块，使用水泽自己的POC模板编写POC进行添加</p><pre class="line-numbers language-none"><code class="language-none">POC的模板文件例子：Plugins&#x2F;Vul&#x2F;Web&#x2F;__template__.py只需要在run_detect方法里调用POC的利用方法即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="API配置"><a href="#API配置" class="headerlink" title="API配置"></a>API配置</h2><p>配置文件地址：<code>iniFile/config.ini</code></p><p>方法简单不再赘述，打开照着配置即可</p><p><img src="/2022/07/21/%E6%B0%B4%E6%B3%BD-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/image-20220725130545680.png"></p>]]></content>
      
      
      <categories>
          
          <category> 信息收集自动化工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 器字篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
